//*****************************************************************************
//
// uart_echo.c - Example for reading data from and writing data to the UART in
//               an interrupt driven fashion.
//
// Copyright (c) 2005-2010 Texas Instruments Incorporated.  All rights reserved.
// Software License Agreement
// 
// Texas Instruments (TI) is supplying this software for use solely and
// exclusively on TI's microcontroller products. The software is owned by
// TI and/or its suppliers, and is protected under applicable copyright
// laws. You may not combine this software with "viral" open-source
// software in order to form a larger program.
// 
// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
// DAMAGES, FOR ANY REASON WHATSOEVER.
// 
// This is part of revision 6459 of the EK-LM3S8962 Firmware Package.
//
//*****************************************************************************

#define GPIO_PB2_I2C0SCL        0x00010801
#define GPIO_PB3_I2C0SDA        0x00010C01
#define SLAVE_ADDRESS_READ 0xef
#define SLAVE_ADDRESS_WRITE 0xee

#define NUM_I2C_DATA 3

#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "inc/hw_i2c.h"
#include "driverlib/i2c.h"
#include "driverlib/pin_map.h"
#include "drivers/rit128x96x4.h"
#include "uart.h"
#include"mydelay.h"
#include <stdint.h>
#include <stdio.h>
//*****************************************************************************
//
//! \addtogroup example_list
//! <h1>UART Echo (uart_echo)</h1>
//!
//! This example application utilizes the UART to echo text.  The first UART
//! (connected to the FTDI virtual serial port on the evaluation board) will be
//! configured in 115,200 baud, 8-n-1 mode.  All characters received on the
//! UART are transmitted back to the UART.
//
//*****************************************************************************

//*****************************************************************************
//
// The error routine that is called if the driver library encounters an error.
//
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, unsigned long ulLine)
{
}
#endif

//*****************************************************************************
//
// The UART interrupt handler.
//
//*****************************************************************************
void
UART0IntHandler(void)
{
    unsigned long ulStatus;

    //
    // Get the interrrupt status.
    //
    ulStatus = UARTIntStatus(UART0_BASE, true);

    //
    // Clear the asserted interrupts.
    //
    UARTIntClear(UART0_BASE, ulStatus);

    //
    // Loop while there are characters in the receive FIFO.
    //
    while(UARTCharsAvail(UART0_BASE))
    {
        //
        // Read the next character from the UART and write it back to the UART.
        //
        UARTCharPutNonBlocking(UART0_BASE, UARTCharGetNonBlocking(UART0_BASE));
    }
}

//*****************************************************************************
//
// Send a string to the UART.
//
//*****************************************************************************
void
UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
    {
        //
        // Write the next character to the UART.
        //
        UARTCharPutNonBlocking(UART0_BASE, *pucBuffer++);
    }
}

//*****************************************************************************
//
// This example demonstrates how to send a string of data to the UART.
//
//*****************************************************************************
//FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);


void init_i2c()
{
		//I2C
		GPIOPinConfigure(GPIO_PB2_I2C0SCL);
    GPIOPinConfigure(GPIO_PB3_I2C0SDA);
    
    SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C0);
    SysCtlPeripheralReset(SYSCTL_PERIPH_I2C0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    
    GPIOPadConfigSet(GPIO_PORTB_BASE,GPIO_PIN_2,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_OD);
    GPIOPadConfigSet(GPIO_PORTB_BASE,GPIO_PIN_3,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_OD);
    
    GPIODirModeSet(GPIO_PORTB_BASE, GPIO_PIN_2, GPIO_DIR_MODE_HW);
    GPIODirModeSet(GPIO_PORTB_BASE, GPIO_PIN_3, GPIO_DIR_MODE_HW);
    
    //GPIOPinTypeI2C(GPIO_PORTB_BASE, GPIO_PIN_2 | GPIO_PIN_3);
    
    I2CMasterInitExpClk(I2C0_MASTER_BASE, SysCtlClockGet(), true);
    
    
    I2CMasterEnable(I2C0_MASTER_BASE);

    //I2CMasterSlaveAddrSet(I2C0_MASTER_BASE,SLAVE_ADDRESS, false);
}


int
main(void)
{
     SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_8MHZ);


    //
    // Enable the peripherals used by this example.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    //
    // Enable processor interrupts.
    //
    IntMasterEnable();

    //
    // Set GPIO A0 and A1 as UART pins.
    //
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    //
    // Configure the UART for 115,200, 8-N-1 operation.
    //
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
                        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                         UART_CONFIG_PAR_NONE));

    //
    // Enable the UART interrupt.
    //
    IntEnable(INT_UART0);
    UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);

    //
    // Prompt for text to be entered.
    //
//    UARTSend((unsigned char *)"Enter text:\n", 12);
    UARTStdioInit(0);
    UARTprintf("Enter text:\n");
    UARTprintf("Hello,world\n");
    unsigned long ulClockMS,ulCount;
		unsigned short usController;

		{
			ulClockMS=SysCtlClockGet();
    	UARTprintf("%d\n",ulClockMS);

    	SysCtlDelay(2000000);
    }
    
    init_i2c();
    
    unsigned long ulindex,ulDataRx[11];
    unsigned char cdata[22];
    
    for(ulindex = 0; ulindex < 11; ulindex++)
    {
        ulDataRx[ulindex] = 0;
    }
    for(ulindex = 0; ulindex < 22; ulindex++)
    {
        cdata[ulindex] = 0;
    }
    
		//I2CMasterSlaveAddrSet(I2C0_MASTER_BASE, SLAVE_ADDRESS, true);
		//I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);
		
		
		while(1)
    {
    		//init_i2c();
    		
    		
    		I2CMasterSlaveAddrSet(I2C0_MASTER_BASE, 0x77, false);
    		//I2CMasterDataPut(I2C0_MASTER_BASE, 0x1d);
    		I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_SINGLE_SEND);
    		I2CMasterDataPut(I2C0_MASTER_BASE, 0xaa);
    		
    		//
    		I2CMasterSlaveAddrSet(I2C0_MASTER_BASE, 0x77, true);
    		
    		for(ulindex=0;ulindex<22;ulindex++)
    		{
    				while(I2CMasterBusy(I2C0_MASTER_BASE)) { /* Wait */ }
 				I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);
    		cdata[ulindex]=I2CMasterDataGet(I2C0_MASTER_BASE);
    		}
    		
    		/*
    		while(I2CMasterBusy(I2C0_MASTER_BASE)) { }
 				I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);
    		recv_data1=I2CMasterDataGet(I2C0_MASTER_BASE);
    		
    		while(I2CMasterBusy(I2C0_MASTER_BASE)) {  }
 				I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);
    		recv_data2=I2CMasterDataGet(I2C0_MASTER_BASE);
    		*/
    		
    		//I2CMasterDataPut(I2C0_MASTER_BASE, 0x22);
    		
    		
/*
    		I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_BURST_SEND_START);
    		//I2CMasterDataPut(I2C0_MASTER_BASE, 0x2d);
    		//I2CMasterDataPut(I2C0_MASTER_BASE, 0x3d);
    		//I2CMasterDataPut(I2C0_MASTER_BASE, 0x4d);
    		I2CMasterDataPut(I2C0_MASTER_BASE, 0x5d);
    		I2CMasterControl(I2C0_MASTER_BASE, I2C_MASTER_CMD_BURST_SEND_FINISH);
*/
				for(ulindex=0;ulindex<22;ulindex++)
				{
					UARTprintf("0x%02x ",cdata[ulindex]);
				}
    		//UARTprintf("(0) i2c master error: %d\n",I2CMasterErr(I2C0_MASTER_BASE));
    		SysCtlDelay(2000000);
    }



    //
    // Tell the user that the test is done.
    //
    UARTprintf("\nDone.\n\n");
    
    
    //
    // Loop forever echoing data through the UART.
    //
    while(1)
    {
    		
        //UARTprintf("%d\n",ulClockMS);
    }
}
