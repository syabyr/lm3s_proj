自己搞定了，贴上这部分代码，供以后使用者参考。没有做边界判断，使用时再进行完善
void TFT_Write_xLine(uint16_t x1,uint16_t x2,uint16_t y , uint16_t Color)
{
uint16_t i  ;
TFTSetXY(x1,y);
for(i=0;i<x2-x1;i++)
{
ILI9481_WriteData(Color);
}

}

void TFT_Write_yLine(uint16_t x,uint16_t y1,uint16_t y2 , uint16_t Color)
{
uint16_t i  ;
//画竖线时使用
ILI9481_WriteIndex(0x0036); //Set_address_mode，为横屏模式
ILI9481_WriteData(0x002a);

//设置X,和Y坐标,注意，此时X，Y跟竖屏模式恰好相反
//请对比void ILI9481_SetCursor(uint16_t x,uint16_t y)函数
ILI9481_WriteIndex(0x002B);
ILI9481_WriteData(x>>8);
ILI9481_WriteData(0x00FF&x);
ILI9481_WriteData(0x0001);
ILI9481_WriteData(0x003F);

ILI9481_WriteIndex(0x002A);
ILI9481_WriteData(y1>>8);
ILI9481_WriteData(0x00FF&y1);
ILI9481_WriteData(0x0001);
ILI9481_WriteData(0x00df);

ILI9481_WriteIndex(0x002C); //开始发送显示GRAM数据
for(i=0;i<y2-y1;i++)
{
ILI9481_WriteData(Color);
}

ILI9481_WriteIndex(0x0036); //Set_address_mode，设置为横屏显示模式
ILI9481_WriteData(0x000a);
}

void ILI9481_SetCursor(uint16_t x,uint16_t y)
{
ILI9481_WriteIndex(0x002A);

ILI9481_WriteData(x>>8);
ILI9481_WriteData(0x00FF&x);


ILI9481_WriteData(0x0001);
ILI9481_WriteData(0x003F);

ILI9481_WriteIndex(0x002B);

ILI9481_WriteData(y>>8);
ILI9481_WriteData(0x00FF&y);


ILI9481_WriteData(0x0001);
ILI9481_WriteData(0x00df);

}


调用void TFT_Write_xLine(uint16_t x1,uint16_t x2,uint16_t y , uint16_t Color)；
和void TFT_Write_yLine(uint16_t x,uint16_t y1,uint16_t y2 , uint16_t Color)；能直接在指定位置画出水平线和垂直线。

其他说明，参考 芯片手册
Set_column_address (2Ah) 
Set_page_address (2Bh) 
Set_address_mode(36h) 
部分。

