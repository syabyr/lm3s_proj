
main.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a94  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000100  20000000  20000000  00010000  2**2
                  ALLOC
  2 .debug_abbrev 00000272  00000000  00000000  00008a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000446  00000000  00000000  00008d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   0000024f  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_loc    000001e7  00000000  00000000  0000939b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000130  00000000  00000000  00009582  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubtypes 00000024  00000000  00000000  000096b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  000096d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00009796  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000248  00000000  00000000  00009856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000009d  00000000  00000000  00009a9e  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000031  00000000  00000000  00009b3b  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000016c  00000000  00000000  00009b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_text>:

#ifdef DEBUG
void
__error__(char *pcFilename, unsigned long ulLine)
{
}
   0:	20000100 	.word	0x20000100
   4:	0000051d 	.word	0x0000051d
   8:	00000517 	.word	0x00000517
   c:	00000519 	.word	0x00000519
  10:	0000051b 	.word	0x0000051b
  14:	0000051b 	.word	0x0000051b
  18:	0000051b 	.word	0x0000051b
  1c:	00000000 	.word	0x00000000
  20:	00000000 	.word	0x00000000
  24:	00000000 	.word	0x00000000
  28:	00000000 	.word	0x00000000
  2c:	0000051b 	.word	0x0000051b
  30:	0000051b 	.word	0x0000051b
  34:	00000000 	.word	0x00000000
  38:	0000051b 	.word	0x0000051b
  3c:	0000051b 	.word	0x0000051b
  40:	0000051b 	.word	0x0000051b
  44:	0000051b 	.word	0x0000051b
  48:	0000051b 	.word	0x0000051b
  4c:	0000051b 	.word	0x0000051b
  50:	0000051b 	.word	0x0000051b
  54:	0000051b 	.word	0x0000051b
  58:	0000051b 	.word	0x0000051b
  5c:	0000051b 	.word	0x0000051b
  60:	0000051b 	.word	0x0000051b
  64:	0000051b 	.word	0x0000051b
  68:	0000051b 	.word	0x0000051b
  6c:	0000051b 	.word	0x0000051b
  70:	0000051b 	.word	0x0000051b
  74:	0000051b 	.word	0x0000051b
  78:	0000051b 	.word	0x0000051b
  7c:	0000051b 	.word	0x0000051b
  80:	0000051b 	.word	0x0000051b
  84:	0000051b 	.word	0x0000051b
  88:	0000051b 	.word	0x0000051b
  8c:	0000051b 	.word	0x0000051b
  90:	0000051b 	.word	0x0000051b
  94:	0000051b 	.word	0x0000051b
  98:	0000051b 	.word	0x0000051b
  9c:	0000051b 	.word	0x0000051b
  a0:	0000051b 	.word	0x0000051b
  a4:	0000051b 	.word	0x0000051b
  a8:	0000051b 	.word	0x0000051b
  ac:	0000051b 	.word	0x0000051b
  b0:	0000051b 	.word	0x0000051b
  b4:	0000051b 	.word	0x0000051b
  b8:	0000051b 	.word	0x0000051b
  bc:	0000051b 	.word	0x0000051b
  c0:	0000051b 	.word	0x0000051b
  c4:	0000051b 	.word	0x0000051b
  c8:	0000051b 	.word	0x0000051b
  cc:	0000051b 	.word	0x0000051b
  d0:	0000051b 	.word	0x0000051b
  d4:	0000051b 	.word	0x0000051b
  d8:	0000051b 	.word	0x0000051b
  dc:	0000051b 	.word	0x0000051b
  e0:	0000051b 	.word	0x0000051b
  e4:	0000051b 	.word	0x0000051b
  e8:	0000051b 	.word	0x0000051b
  ec:	0000051b 	.word	0x0000051b

000000f0 <main>:
#endif


int main(void)
{
  f0:	b538      	push	{r3, r4, r5, lr}
	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_8MHZ);
  f2:	4811      	ldr	r0, [pc, #68]	; (138 <main+0x48>)
  f4:	f000 fafa 	bl	6ec <SysCtlClockSet>


	unsigned ulClockMS = SysCtlClockGet() / (3 * 1000);
  f8:	f000 fba8 	bl	84c <SysCtlClockGet>

	LCD_240x400_HX8352Init();
  fc:	f000 f89e 	bl	23c <LCD_240x400_HX8352Init>
	LCD_240x400_HX8352BacklightOn();		//打开背光
 100:	f000 f9e4 	bl	4cc <LCD_240x400_HX8352BacklightOn>
	unsigned int i,j;

	WriteCommand(0x0022);
 104:	2022      	movs	r0, #34	; 0x22
 106:	f000 f839 	bl	17c <WriteCommand>
 10a:	f44f 74c8 	mov.w	r4, #400	; 0x190
 10e:	e006      	b.n	11e <main+0x2e>
	for(i=0;i<400;i++)
	{
		for(j=0;j<240;j++)
		{
			WriteData(0x0000);
 110:	2000      	movs	r0, #0
 112:	f000 f813 	bl	13c <WriteData>
	unsigned int i,j;

	WriteCommand(0x0022);
	for(i=0;i<400;i++)
	{
		for(j=0;j<240;j++)
 116:	3d01      	subs	r5, #1
 118:	d1fa      	bne.n	110 <main+0x20>
	LCD_240x400_HX8352Init();
	LCD_240x400_HX8352BacklightOn();		//打开背光
	unsigned int i,j;

	WriteCommand(0x0022);
	for(i=0;i<400;i++)
 11a:	3c01      	subs	r4, #1
 11c:	d001      	beq.n	122 <main+0x32>
}
#endif


int main(void)
{
 11e:	25f0      	movs	r5, #240	; 0xf0
 120:	e7f6      	b.n	110 <main+0x20>
		for(j=0;j<240;j++)
		{
			WriteData(0x0000);
		}
	}
	WriteCommand(0x0022);
 122:	2022      	movs	r0, #34	; 0x22
 124:	f000 f82a 	bl	17c <WriteCommand>
//	TestPixel();
	LCD_240x480_HX8352PixelDraw(10,10,0xffff);
 128:	200a      	movs	r0, #10
 12a:	4601      	mov	r1, r0
 12c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 130:	f000 f9d2 	bl	4d8 <LCD_240x480_HX8352PixelDraw>
 134:	e7fe      	b.n	134 <main+0x44>
 136:	bf00      	nop
 138:	01c00380 	.word	0x01c00380

0000013c <WriteData>:

//写一个数据到hx8352控制器
void WriteData(unsigned short usData)
{
	//将数据写入数据总线,低8位写在PORTA上,高7位写在PORTB上,最高位写在PC7上
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=usData;
 13c:	4b0b      	ldr	r3, [pc, #44]	; (16c <WriteData+0x30>)
                                 ((((c) & 0x0000ff00) >> 5) & 0x000007e0) | \
                                 ((((c) & 0x000000ff) << 8) & 0x0000f800))

//写一个数据到hx8352控制器
void WriteData(unsigned short usData)
{
 13e:	b510      	push	{r4, lr}
	//将数据写入数据总线,低8位写在PORTA上,高7位写在PORTB上,最高位写在PC7上
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=usData;
 140:	6018      	str	r0, [r3, #0]
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=usData>>8;
 142:	4b0b      	ldr	r3, [pc, #44]	; (170 <WriteData+0x34>)
 144:	0a02      	lsrs	r2, r0, #8
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,(usData>>8)&0x80);
 146:	2180      	movs	r1, #128	; 0x80
//写一个数据到hx8352控制器
void WriteData(unsigned short usData)
{
	//将数据写入数据总线,低8位写在PORTA上,高7位写在PORTB上,最高位写在PC7上
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=usData;
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=usData>>8;
 148:	601a      	str	r2, [r3, #0]
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,(usData>>8)&0x80);
 14a:	480a      	ldr	r0, [pc, #40]	; (174 <WriteData+0x38>)
 14c:	400a      	ands	r2, r1
 14e:	f000 faa7 	bl	6a0 <GPIOPinWrite>
	//使能读信号,将信号线拉低后再拉高
	LCD_WRITE_ON;
 152:	2102      	movs	r1, #2
 154:	2200      	movs	r2, #0
 156:	4808      	ldr	r0, [pc, #32]	; (178 <WriteData+0x3c>)
 158:	f000 faa2 	bl	6a0 <GPIOPinWrite>
	LCD_WRITE_OFF;
 15c:	2102      	movs	r1, #2
 15e:	4806      	ldr	r0, [pc, #24]	; (178 <WriteData+0x3c>)
 160:	460a      	mov	r2, r1
}
 162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=usData;
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=usData>>8;
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,(usData>>8)&0x80);
	//使能读信号,将信号线拉低后再拉高
	LCD_WRITE_ON;
	LCD_WRITE_OFF;
 166:	f000 ba9b 	b.w	6a0 <GPIOPinWrite>
 16a:	bf00      	nop
 16c:	400043fc 	.word	0x400043fc
 170:	400053fc 	.word	0x400053fc
 174:	40006000 	.word	0x40006000
 178:	40025000 	.word	0x40025000

0000017c <WriteCommand>:

//写命令,8bit,需要选择寄存器
void WriteCommand(unsigned char ucData)
{
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
 17c:	4b0c      	ldr	r3, [pc, #48]	; (1b0 <WriteCommand+0x34>)
	return (usData);
}

//写命令,8bit,需要选择寄存器
void WriteCommand(unsigned char ucData)
{
 17e:	b510      	push	{r4, lr}
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
	//拉低寄存器选择信号,然后使能写信号
	LCD_RS_ON;
 180:	2104      	movs	r1, #4

//写命令,8bit,需要选择寄存器
void WriteCommand(unsigned char ucData)
{
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
 182:	6018      	str	r0, [r3, #0]
	//拉低寄存器选择信号,然后使能写信号
	LCD_RS_ON;
 184:	2200      	movs	r2, #0
 186:	480b      	ldr	r0, [pc, #44]	; (1b4 <WriteCommand+0x38>)
 188:	f000 fa8a 	bl	6a0 <GPIOPinWrite>
	LCD_WRITE_ON;
 18c:	2102      	movs	r1, #2
 18e:	2200      	movs	r2, #0
 190:	4808      	ldr	r0, [pc, #32]	; (1b4 <WriteCommand+0x38>)
 192:	f000 fa85 	bl	6a0 <GPIOPinWrite>
	LCD_WRITE_OFF;
 196:	2102      	movs	r1, #2
 198:	460a      	mov	r2, r1
 19a:	4806      	ldr	r0, [pc, #24]	; (1b4 <WriteCommand+0x38>)
 19c:	f000 fa80 	bl	6a0 <GPIOPinWrite>
	LCD_RS_OFF;
 1a0:	2104      	movs	r1, #4
 1a2:	4804      	ldr	r0, [pc, #16]	; (1b4 <WriteCommand+0x38>)
 1a4:	460a      	mov	r2, r1
}
 1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
	//拉低寄存器选择信号,然后使能写信号
	LCD_RS_ON;
	LCD_WRITE_ON;
	LCD_WRITE_OFF;
	LCD_RS_OFF;
 1aa:	f000 ba79 	b.w	6a0 <GPIOPinWrite>
 1ae:	bf00      	nop
 1b0:	400043fc 	.word	0x400043fc
 1b4:	40025000 	.word	0x40025000

000001b8 <WriteRegister>:
	return(ReadData());
}

//更新寄存器内的值
static void WriteRegister(unsigned char ucIndex,unsigned short usValue)
{
 1b8:	b510      	push	{r4, lr}
 1ba:	460c      	mov	r4, r1
	WriteCommand(ucIndex);
 1bc:	f7ff ffde 	bl	17c <WriteCommand>
	WriteData(usValue);
 1c0:	4620      	mov	r0, r4
}
 1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//更新寄存器内的值
static void WriteRegister(unsigned char ucIndex,unsigned short usValue)
{
	WriteCommand(ucIndex);
	WriteData(usValue);
 1c6:	f7ff bfb9 	b.w	13c <WriteData>
 1ca:	0000      	movs	r0, r0

000001cc <ReadRegister.clone.0>:
	LCD_WRITE_OFF;
	LCD_RS_OFF;
}

//读取寄存器内的值
static unsigned short ReadRegister(unsigned ucIndex)
 1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	WriteCommand(ucIndex);
 1d0:	2000      	movs	r0, #0
//从数据总线读取hx8352内的数据
static unsigned short ReadData(void)
{
	unsigned short usData=0;
	//将总线设置为输入
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0x00;
 1d2:	4d14      	ldr	r5, [pc, #80]	; (224 <ReadRegister.clone.0+0x58>)
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0x00;
 1d4:	4e14      	ldr	r6, [pc, #80]	; (228 <ReadRegister.clone.0+0x5c>)
}

//读取寄存器内的值
static unsigned short ReadRegister(unsigned ucIndex)
{
	WriteCommand(ucIndex);
 1d6:	f7ff ffd1 	bl	17c <WriteCommand>
{
	unsigned short usData=0;
	//将总线设置为输入
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0x00;
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0x00;
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
 1da:	4c14      	ldr	r4, [pc, #80]	; (22c <ReadRegister.clone.0+0x60>)
//从数据总线读取hx8352内的数据
static unsigned short ReadData(void)
{
	unsigned short usData=0;
	//将总线设置为输入
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0x00;
 1dc:	2200      	movs	r2, #0
 1de:	602a      	str	r2, [r5, #0]
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0x00;
 1e0:	6032      	str	r2, [r6, #0]
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
 1e2:	6823      	ldr	r3, [r4, #0]
	//拉低读信号
	LCD_READ_ON;
 1e4:	2101      	movs	r1, #1
{
	unsigned short usData=0;
	//将总线设置为输入
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0x00;
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0x00;
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
 1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1ea:	6023      	str	r3, [r4, #0]
	//拉低读信号
	LCD_READ_ON;
 1ec:	4810      	ldr	r0, [pc, #64]	; (230 <ReadRegister.clone.0+0x64>)
 1ee:	f000 fa57 	bl	6a0 <GPIOPinWrite>
	//读取数据
	usData=HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2));
 1f2:	4b10      	ldr	r3, [pc, #64]	; (234 <ReadRegister.clone.0+0x68>)
	usData|=HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8;
	usData|=(HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8)&0x80;
	//拉高读信号
	LCD_READ_OFF;
 1f4:	2101      	movs	r1, #1
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0x00;
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
	//拉低读信号
	LCD_READ_ON;
	//读取数据
	usData=HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2));
 1f6:	681f      	ldr	r7, [r3, #0]
	usData|=HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8;
 1f8:	4b0f      	ldr	r3, [pc, #60]	; (238 <ReadRegister.clone.0+0x6c>)
	usData|=(HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8)&0x80;
	//拉高读信号
	LCD_READ_OFF;
 1fa:	480d      	ldr	r0, [pc, #52]	; (230 <ReadRegister.clone.0+0x64>)
 1fc:	460a      	mov	r2, r1
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
	//拉低读信号
	LCD_READ_ON;
	//读取数据
	usData=HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2));
	usData|=HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8;
 1fe:	f8d3 8000 	ldr.w	r8, [r3]
	usData|=(HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8)&0x80;
 202:	681b      	ldr	r3, [r3, #0]
	//拉高读信号
	LCD_READ_OFF;
 204:	f000 fa4c 	bl	6a0 <GPIOPinWrite>
	//将总线设置为输出端口
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0xff;
 208:	23ff      	movs	r3, #255	; 0xff
 20a:	6033      	str	r3, [r6, #0]
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0xff;
 20c:	602b      	str	r3, [r5, #0]
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)|=0x80;
 20e:	6823      	ldr	r3, [r4, #0]
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0x00;
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
	//拉低读信号
	LCD_READ_ON;
	//读取数据
	usData=HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2));
 210:	b2bf      	uxth	r7, r7
	//拉高读信号
	LCD_READ_OFF;
	//将总线设置为输出端口
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0xff;
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0xff;
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)|=0x80;
 212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)&=0x7F;
	//拉低读信号
	LCD_READ_ON;
	//读取数据
	usData=HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2));
	usData|=HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))<<8;
 216:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
	//拉高读信号
	LCD_READ_OFF;
	//将总线设置为输出端口
	HWREG(LCD_DATAL_BASE+GPIO_O_DIR)=0xff;
	HWREG(LCD_DATAH_BASE+GPIO_O_DIR)=0xff;
	HWREG(GPIO_PORTC_BASE+GPIO_O_DIR)|=0x80;
 21a:	6023      	str	r3, [r4, #0]
//读取寄存器内的值
static unsigned short ReadRegister(unsigned ucIndex)
{
	WriteCommand(ucIndex);
	return(ReadData());
}
 21c:	b2b8      	uxth	r0, r7
 21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 222:	bf00      	nop
 224:	40005400 	.word	0x40005400
 228:	40004400 	.word	0x40004400
 22c:	40006400 	.word	0x40006400
 230:	40025000 	.word	0x40025000
 234:	400043fc 	.word	0x400043fc
 238:	400053fc 	.word	0x400053fc

0000023c <LCD_240x400_HX8352Init>:
	WriteData(usValue);
}

//液晶初始化
void LCD_240x400_HX8352Init(void)
{
 23c:	b570      	push	{r4, r5, r6, lr}
	unsigned long ulClockMS,ulCount;
	unsigned short usController;

	ulClockMS=SysCtlClockGet()/(3*1000);
 23e:	f000 fb05 	bl	84c <SysCtlClockGet>
 242:	f640 34b8 	movw	r4, #3000	; 0xbb8
 246:	fbb0 f4f4 	udiv	r4, r0, r4
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
 24a:	4896      	ldr	r0, [pc, #600]	; (4a4 <LCD_240x400_HX8352Init+0x268>)
 24c:	f000 fa3a 	bl	6c4 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
 250:	4895      	ldr	r0, [pc, #596]	; (4a8 <LCD_240x400_HX8352Init+0x26c>)
 252:	f000 fa37 	bl	6c4 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
 256:	4895      	ldr	r0, [pc, #596]	; (4ac <LCD_240x400_HX8352Init+0x270>)
 258:	f000 fa34 	bl	6c4 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
 25c:	4894      	ldr	r0, [pc, #592]	; (4b0 <LCD_240x400_HX8352Init+0x274>)
 25e:	f000 fa31 	bl	6c4 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);
 262:	4894      	ldr	r0, [pc, #592]	; (4b4 <LCD_240x400_HX8352Init+0x278>)
 264:	f000 fa2e 	bl	6c4 <SysCtlPeripheralEnable>

	//设置这些管脚为输出,以及他们的默认值
	//数据低8bit
	GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,0xff);	//0B1111 1111
 268:	21ff      	movs	r1, #255	; 0xff
 26a:	4893      	ldr	r0, [pc, #588]	; (4b8 <LCD_240x400_HX8352Init+0x27c>)
 26c:	f000 fa1b 	bl	6a6 <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTA_BASE,0xff,0x00);
 270:	2200      	movs	r2, #0
 272:	21ff      	movs	r1, #255	; 0xff
 274:	4890      	ldr	r0, [pc, #576]	; (4b8 <LCD_240x400_HX8352Init+0x27c>)
 276:	f000 fa13 	bl	6a0 <GPIOPinWrite>
	//数据高8bit
	GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE,0x7f);	//0B0111 1111
 27a:	217f      	movs	r1, #127	; 0x7f
 27c:	488f      	ldr	r0, [pc, #572]	; (4bc <LCD_240x400_HX8352Init+0x280>)
 27e:	f000 fa12 	bl	6a6 <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTB_BASE,0x7f,0x00);
 282:	2200      	movs	r2, #0
 284:	217f      	movs	r1, #127	; 0x7f
 286:	488d      	ldr	r0, [pc, #564]	; (4bc <LCD_240x400_HX8352Init+0x280>)
 288:	f000 fa0a 	bl	6a0 <GPIOPinWrite>
	//PC5,芯片使能,PC6,背光,默认背光关闭,等会要打开,PC7,数据DB15
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE,0xE0);	//0B1110 0000
 28c:	21e0      	movs	r1, #224	; 0xe0
 28e:	488c      	ldr	r0, [pc, #560]	; (4c0 <LCD_240x400_HX8352Init+0x284>)
 290:	f000 fa09 	bl	6a6 <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTC_BASE,0xE0,0x20);		//0B0010 0000
 294:	2220      	movs	r2, #32
 296:	21e0      	movs	r1, #224	; 0xe0
 298:	4889      	ldr	r0, [pc, #548]	; (4c0 <LCD_240x400_HX8352Init+0x284>)
 29a:	f000 fa01 	bl	6a0 <GPIOPinWrite>
	//RS,WR,RD信号,PF0,PF1,PF2,默认都为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE,0x07);	//0B0000 0111
 29e:	2107      	movs	r1, #7
 2a0:	4888      	ldr	r0, [pc, #544]	; (4c4 <LCD_240x400_HX8352Init+0x288>)
 2a2:	f000 fa00 	bl	6a6 <GPIOPinTypeGPIOOutput>
	//RESET复位信号,PG0,默认为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE,0x01);
	GPIOPinWrite(GPIO_PORTG_BASE,0x01,0x01);

	//复位液晶
	SysCtlDelay(10*ulClockMS);
 2a6:	260a      	movs	r6, #10
	//PC5,芯片使能,PC6,背光,默认背光关闭,等会要打开,PC7,数据DB15
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE,0xE0);	//0B1110 0000
	GPIOPinWrite(GPIO_PORTC_BASE,0xE0,0x20);		//0B0010 0000
	//RS,WR,RD信号,PF0,PF1,PF2,默认都为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE,0x07);	//0B0000 0111
	GPIOPinWrite(GPIO_PORTF_BASE,0x07,0x07);
 2a8:	2107      	movs	r1, #7
	//RESET复位信号,PG0,默认为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE,0x01);
	GPIOPinWrite(GPIO_PORTG_BASE,0x01,0x01);

	//复位液晶
	SysCtlDelay(10*ulClockMS);
 2aa:	fb06 f504 	mul.w	r5, r6, r4
	//PC5,芯片使能,PC6,背光,默认背光关闭,等会要打开,PC7,数据DB15
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE,0xE0);	//0B1110 0000
	GPIOPinWrite(GPIO_PORTC_BASE,0xE0,0x20);		//0B0010 0000
	//RS,WR,RD信号,PF0,PF1,PF2,默认都为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE,0x07);	//0B0000 0111
	GPIOPinWrite(GPIO_PORTF_BASE,0x07,0x07);
 2ae:	460a      	mov	r2, r1
 2b0:	4884      	ldr	r0, [pc, #528]	; (4c4 <LCD_240x400_HX8352Init+0x288>)
 2b2:	f000 f9f5 	bl	6a0 <GPIOPinWrite>
	//RESET复位信号,PG0,默认为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE,0x01);
 2b6:	2101      	movs	r1, #1
 2b8:	4883      	ldr	r0, [pc, #524]	; (4c8 <LCD_240x400_HX8352Init+0x28c>)
 2ba:	f000 f9f4 	bl	6a6 <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTG_BASE,0x01,0x01);
 2be:	2101      	movs	r1, #1
 2c0:	460a      	mov	r2, r1
 2c2:	4881      	ldr	r0, [pc, #516]	; (4c8 <LCD_240x400_HX8352Init+0x28c>)
 2c4:	f000 f9ec 	bl	6a0 <GPIOPinWrite>

	//复位液晶
	SysCtlDelay(10*ulClockMS);
 2c8:	4628      	mov	r0, r5
 2ca:	f000 fa0b 	bl	6e4 <SysCtlDelay>
	GPIOPinWrite(LCD_RST_BASE,0x01,0x00);		//assert reset signal
 2ce:	2101      	movs	r1, #1
 2d0:	2200      	movs	r2, #0
 2d2:	487d      	ldr	r0, [pc, #500]	; (4c8 <LCD_240x400_HX8352Init+0x28c>)
 2d4:	f000 f9e4 	bl	6a0 <GPIOPinWrite>
	SysCtlDelay(10*ulClockMS);
 2d8:	4628      	mov	r0, r5
 2da:	f000 fa03 	bl	6e4 <SysCtlDelay>
	GPIOPinWrite(LCD_RST_BASE,0x01,0x01);		//deassert reset signal
 2de:	2101      	movs	r1, #1
 2e0:	460a      	mov	r2, r1
 2e2:	4879      	ldr	r0, [pc, #484]	; (4c8 <LCD_240x400_HX8352Init+0x28c>)
 2e4:	f000 f9dc 	bl	6a0 <GPIOPinWrite>

	SysCtlDelay(50*ulClockMS);				//等待恢复
 2e8:	2032      	movs	r0, #50	; 0x32
 2ea:	4360      	muls	r0, r4
 2ec:	f000 f9fa 	bl	6e4 <SysCtlDelay>
	SysCtlDelay(10*ulClockMS);				//等待振荡器稳定
 2f0:	4628      	mov	r0, r5
 2f2:	f000 f9f7 	bl	6e4 <SysCtlDelay>
	usController=ReadRegister(0x00);
 2f6:	f7ff ff69 	bl	1cc <ReadRegister.clone.0>


	//初始化命令部分
	WriteRegister(0x0083,0x0002);	//test mode=1,内部寄存器能够接受新的设置
 2fa:	2083      	movs	r0, #131	; 0x83
 2fc:	2102      	movs	r1, #2
 2fe:	f7ff ff5b 	bl	1b8 <WriteRegister>
	WriteRegister(0x0085,0x0002); // VDC_SEL=111.VDDD的电压设置
 302:	2085      	movs	r0, #133	; 0x85
 304:	2102      	movs	r1, #2
 306:	f7ff ff57 	bl	1b8 <WriteRegister>
	//Source gamma resistor setting register
	WriteRegister(0x008B,0x0000); // STBA[15:8]=0x00
 30a:	208b      	movs	r0, #139	; 0x8b
 30c:	2100      	movs	r1, #0
 30e:	f7ff ff53 	bl	1b8 <WriteRegister>
	WriteRegister(0x008C,0x0033); // STBA[7]=1, STBA[5:4]=01, STBA[1:0]=11
 312:	208c      	movs	r0, #140	; 0x8c
 314:	2133      	movs	r1, #51	; 0x33
 316:	f7ff ff4f 	bl	1b8 <WriteRegister>
	WriteRegister(0x0091,0x0001); // DCDC_and_Display CLK SYNC=1,
 31a:	2091      	movs	r0, #145	; 0x91
 31c:	2101      	movs	r1, #1
 31e:	f7ff ff4b 	bl	1b8 <WriteRegister>

	//结束测试模式
	WriteRegister(0x0083,0x0000); // TESTM=0
 322:	2083      	movs	r0, #131	; 0x83
 324:	2100      	movs	r1, #0
 326:	f7ff ff47 	bl	1b8 <WriteRegister>
	// Gamma Setting
	WriteRegister(0x003E,0x00f0); //γ center adjustment register for positive 
 32a:	203e      	movs	r0, #62	; 0x3e
 32c:	21f0      	movs	r1, #240	; 0xf0
 32e:	f7ff ff43 	bl	1b8 <WriteRegister>
	WriteRegister(0x003F,0x0007); //γ center adjustment register for negative 
 332:	2107      	movs	r1, #7
 334:	203f      	movs	r0, #63	; 0x3f
 336:	f7ff ff3f 	bl	1b8 <WriteRegister>
	WriteRegister(0x0040,0x0000); //γ macro adjustment register for positive 
 33a:	2040      	movs	r0, #64	; 0x40
 33c:	2100      	movs	r1, #0
 33e:	f7ff ff3b 	bl	1b8 <WriteRegister>
	WriteRegister(0x0041,0x0043); //γ macro adjustment register for positive 
 342:	2041      	movs	r0, #65	; 0x41
 344:	2143      	movs	r1, #67	; 0x43
 346:	f7ff ff37 	bl	1b8 <WriteRegister>
	WriteRegister(0x0042,0x0016); //γ macro adjustment register for positive 
 34a:	2042      	movs	r0, #66	; 0x42
 34c:	2116      	movs	r1, #22
 34e:	f7ff ff33 	bl	1b8 <WriteRegister>
	WriteRegister(0x0043,0x0016); //γ macro adjustment register for negative 
 352:	2043      	movs	r0, #67	; 0x43
 354:	2116      	movs	r1, #22
 356:	f7ff ff2f 	bl	1b8 <WriteRegister>
	WriteRegister(0x0044,0x0043); //γ macro adjustment register for negative 
 35a:	2044      	movs	r0, #68	; 0x44
 35c:	2143      	movs	r1, #67	; 0x43
 35e:	f7ff ff2b 	bl	1b8 <WriteRegister>
	WriteRegister(0x0045,0x0077); //γ macro adjustment register for negative 
 362:	2045      	movs	r0, #69	; 0x45
 364:	2177      	movs	r1, #119	; 0x77
 366:	f7ff ff27 	bl	1b8 <WriteRegister>
	WriteRegister(0x0046,0x0000); //γ offset adjustment register for positive 
 36a:	2046      	movs	r0, #70	; 0x46
 36c:	2100      	movs	r1, #0
 36e:	f7ff ff23 	bl	1b8 <WriteRegister>
	WriteRegister(0x0047,0x001e); //γ offset adjustment register for positive 
 372:	2047      	movs	r0, #71	; 0x47
 374:	211e      	movs	r1, #30
 376:	f7ff ff1f 	bl	1b8 <WriteRegister>
	WriteRegister(0x0048,0x000f); //γ offset adjustment register for negative 
 37a:	2048      	movs	r0, #72	; 0x48
 37c:	210f      	movs	r1, #15
 37e:	f7ff ff1b 	bl	1b8 <WriteRegister>
	WriteRegister(0x0049,0x0000); //γ offset adjustment register for negative 
 382:	2049      	movs	r0, #73	; 0x49
 384:	2100      	movs	r1, #0
 386:	f7ff ff17 	bl	1b8 <WriteRegister>

	// Power Supply Setting
	WriteRegister(0x0017,0x0011); // RADJ=1001, OSC_EN=1    0071,设置内部振荡器的频率
 38a:	2111      	movs	r1, #17
 38c:	2017      	movs	r0, #23
 38e:	f7ff ff13 	bl	1b8 <WriteRegister>
	WriteRegister(0x0023,0x0001); //TEON=1,Tearing-Effect mode
 392:	2023      	movs	r0, #35	; 0x23
 394:	2101      	movs	r1, #1
 396:	f7ff ff0f 	bl	1b8 <WriteRegister>
	WriteRegister(0x002B,0x0053); // N_DCDC=0x7D,Normal mode,普通模式下的分频
 39a:	2153      	movs	r1, #83	; 0x53
 39c:	202b      	movs	r0, #43	; 0x2b
 39e:	f7ff ff0b 	bl	1b8 <WriteRegister>
	SysCtlDelay(100*ulClockMS);
 3a2:	2064      	movs	r0, #100	; 0x64
 3a4:	4360      	muls	r0, r4
 3a6:	f000 f99d 	bl	6e4 <SysCtlDelay>
	WriteRegister(0x001B,0x0014); // BT=0100, AP=100
 3aa:	201b      	movs	r0, #27
 3ac:	2114      	movs	r1, #20
 3ae:	f7ff ff03 	bl	1b8 <WriteRegister>
	WriteRegister(0x001A,0x0030); // VC3=000, VC1=101 
 3b2:	201a      	movs	r0, #26
 3b4:	2130      	movs	r1, #48	; 0x30
 3b6:	f7ff feff 	bl	1b8 <WriteRegister>
	WriteRegister(0x001C,0x000c); // PON=1, VRH=0110 //0c
 3ba:	201c      	movs	r0, #28
 3bc:	210c      	movs	r1, #12
 3be:	f7ff fefb 	bl	1b8 <WriteRegister>
	WriteRegister(0x001D,0x000b); //BGP=1111 
 3c2:	201d      	movs	r0, #29
 3c4:	210b      	movs	r1, #11
 3c6:	f7ff fef7 	bl	1b8 <WriteRegister>
	WriteRegister(0x001F,0x0050); // VCM=1010101          0053
 3ca:	2150      	movs	r1, #80	; 0x50
 3cc:	201f      	movs	r0, #31
 3ce:	f7ff fef3 	bl	1b8 <WriteRegister>
	SysCtlDelay(20*ulClockMS);
 3d2:	2014      	movs	r0, #20
 3d4:	4360      	muls	r0, r4
 3d6:	f000 f985 	bl	6e4 <SysCtlDelay>
	WriteRegister(0x0019,0x000A); // GASENB=0, PON=0, DK=1, XDK=0, VLCD_TRI=0, STB=0 
 3da:	2019      	movs	r0, #25
 3dc:	4631      	mov	r1, r6
 3de:	f7ff feeb 	bl	1b8 <WriteRegister>
	WriteRegister(0x0019,0x001A); // GASENB=0, PON=0, DK=0, XDK=0, VLCD_TRI=0, STB=0 
	SysCtlDelay(40*ulClockMS);
 3e2:	2528      	movs	r5, #40	; 0x28
	WriteRegister(0x001C,0x000c); // PON=1, VRH=0110 //0c
	WriteRegister(0x001D,0x000b); //BGP=1111 
	WriteRegister(0x001F,0x0050); // VCM=1010101          0053
	SysCtlDelay(20*ulClockMS);
	WriteRegister(0x0019,0x000A); // GASENB=0, PON=0, DK=1, XDK=0, VLCD_TRI=0, STB=0 
	WriteRegister(0x0019,0x001A); // GASENB=0, PON=0, DK=0, XDK=0, VLCD_TRI=0, STB=0 
 3e4:	211a      	movs	r1, #26
 3e6:	2019      	movs	r0, #25
 3e8:	f7ff fee6 	bl	1b8 <WriteRegister>
	SysCtlDelay(40*ulClockMS);
 3ec:	4365      	muls	r5, r4
 3ee:	4628      	mov	r0, r5
 3f0:	f000 f978 	bl	6e4 <SysCtlDelay>
	WriteRegister(0x0019,0x0012); // GASENB=0, DK=0, XDK=1, VLCD_TRI=0, STB=0, 
 3f4:	2112      	movs	r1, #18
 3f6:	2019      	movs	r0, #25
 3f8:	f7ff fede 	bl	1b8 <WriteRegister>
	//VLCD=2XVCI by 2 CAPs 
	SysCtlDelay(80*ulClockMS);
 3fc:	2050      	movs	r0, #80	; 0x50
 3fe:	4360      	muls	r0, r4
 400:	f000 f970 	bl	6e4 <SysCtlDelay>
	WriteRegister(0x001E,0x002b); // VCOMG=1, VDV=10000     002b
 404:	201e      	movs	r0, #30
 406:	212b      	movs	r1, #43	; 0x2b
 408:	f7ff fed6 	bl	1b8 <WriteRegister>
	// DGC Function Enable
	//WriteRegister(0x5A,0x01);
	//GC_PA_REG(0x5C);
	//Window set
	WriteRegister(0x0002,0x0000); // Column Address Start Register, High 8 bit 
 40c:	2002      	movs	r0, #2
 40e:	2100      	movs	r1, #0
 410:	f7ff fed2 	bl	1b8 <WriteRegister>
	WriteRegister(0x0003,0x0000); // Column Address Start Register, Low 8bit 
 414:	2003      	movs	r0, #3
 416:	2100      	movs	r1, #0
 418:	f7ff fece 	bl	1b8 <WriteRegister>
	WriteRegister(0x0004,0x0000); // Column Address end Register, High 8 bit 
 41c:	2004      	movs	r0, #4
 41e:	2100      	movs	r1, #0
 420:	f7ff feca 	bl	1b8 <WriteRegister>
	WriteRegister(0x0005,0x00EF); // Column Address end Start Register, Low 8 bit 
 424:	2005      	movs	r0, #5
 426:	21ef      	movs	r1, #239	; 0xef
 428:	f7ff fec6 	bl	1b8 <WriteRegister>
	WriteRegister(0x0006,0x0000); // Row Address Start Register, High 8 bit 
 42c:	2006      	movs	r0, #6
 42e:	2100      	movs	r1, #0
 430:	f7ff fec2 	bl	1b8 <WriteRegister>
	WriteRegister(0x0007,0x0000); // Row Address Start Register, Low 8bit 
 434:	2007      	movs	r0, #7
 436:	2100      	movs	r1, #0
 438:	f7ff febe 	bl	1b8 <WriteRegister>
	WriteRegister(0x0008,0x0001); // Row Address end Register, High 8 bit 
 43c:	2008      	movs	r0, #8
 43e:	2101      	movs	r1, #1
 440:	f7ff feba 	bl	1b8 <WriteRegister>
	WriteRegister(0x0009,0x008F); // Row Address end Register, Low 8bit 
 444:	2009      	movs	r0, #9
 446:	218f      	movs	r1, #143	; 0x8f
 448:	f7ff feb6 	bl	1b8 <WriteRegister>
	// Display ON Setting
	WriteRegister(0x003C,0x00FF); // N_SAP=1100 000
 44c:	203c      	movs	r0, #60	; 0x3c
 44e:	21ff      	movs	r1, #255	; 0xff
 450:	f7ff feb2 	bl	1b8 <WriteRegister>
	WriteRegister(0x003D,0x000e); // I_SAP =1100 0000
 454:	203d      	movs	r0, #61	; 0x3d
 456:	210e      	movs	r1, #14
 458:	f7ff feae 	bl	1b8 <WriteRegister>
	WriteRegister(0x0034,0x0038); // EQS=1000 0111
 45c:	2034      	movs	r0, #52	; 0x34
 45e:	2138      	movs	r1, #56	; 0x38
 460:	f7ff feaa 	bl	1b8 <WriteRegister>
	WriteRegister(0x0035,0x0038); // EQP=0011 1000
 464:	2035      	movs	r0, #53	; 0x35
 466:	2138      	movs	r1, #56	; 0x38
 468:	f7ff fea6 	bl	1b8 <WriteRegister>
	WriteRegister(0x0024,0x0038); // GON=1, DTE=1, D=10
 46c:	2138      	movs	r1, #56	; 0x38
 46e:	2024      	movs	r0, #36	; 0x24
 470:	f7ff fea2 	bl	1b8 <WriteRegister>
	SysCtlDelay(40*ulClockMS);
 474:	4628      	mov	r0, r5
 476:	f000 f935 	bl	6e4 <SysCtlDelay>
	WriteRegister(0x0024,0x003C); // GON=1, DTE=1, D=11
 47a:	2024      	movs	r0, #36	; 0x24
 47c:	213c      	movs	r1, #60	; 0x3c
 47e:	f7ff fe9b 	bl	1b8 <WriteRegister>
	WriteRegister(0x0016,0x0000); // BGR=1    1c
 482:	2016      	movs	r0, #22
 484:	2100      	movs	r1, #0
 486:	f7ff fe97 	bl	1b8 <WriteRegister>
	WriteRegister(0x0001,0x0002); // INVON=0, NORNO=1
 48a:	2001      	movs	r0, #1
 48c:	2102      	movs	r1, #2
 48e:	f7ff fe93 	bl	1b8 <WriteRegister>
	WriteRegister(0x0055,0x0002);
 492:	2055      	movs	r0, #85	; 0x55
 494:	2102      	movs	r1, #2
 496:	f7ff fe8f 	bl	1b8 <WriteRegister>
	WriteCommand(0x0022);
 49a:	2022      	movs	r0, #34	; 0x22
//	for(ulCount=0;ulCount<(240*400);ulCount++)
//	{
//		WriteData(0x0000);
//	}
}
 49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SysCtlDelay(40*ulClockMS);
	WriteRegister(0x0024,0x003C); // GON=1, DTE=1, D=11
	WriteRegister(0x0016,0x0000); // BGR=1    1c
	WriteRegister(0x0001,0x0002); // INVON=0, NORNO=1
	WriteRegister(0x0055,0x0002);
	WriteCommand(0x0022);
 4a0:	f7ff be6c 	b.w	17c <WriteCommand>
 4a4:	20000001 	.word	0x20000001
 4a8:	20000002 	.word	0x20000002
 4ac:	20000004 	.word	0x20000004
 4b0:	20000020 	.word	0x20000020
 4b4:	20000040 	.word	0x20000040
 4b8:	40004000 	.word	0x40004000
 4bc:	40005000 	.word	0x40005000
 4c0:	40006000 	.word	0x40006000
 4c4:	40025000 	.word	0x40025000
 4c8:	40026000 	.word	0x40026000

000004cc <LCD_240x400_HX8352BacklightOn>:
}

//打开背光
void LCD_240x400_HX8352BacklightOn(void)
{
	HWREG(LCD_BL_BASE+GPIO_O_DATA+(LCD_BL_PIN<<2))=LCD_BL_PIN;
 4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <LCD_240x400_HX8352BacklightOn+0x8>)
 4ce:	2240      	movs	r2, #64	; 0x40
 4d0:	601a      	str	r2, [r3, #0]
}
 4d2:	4770      	bx	lr
 4d4:	40006100 	.word	0x40006100

000004d8 <LCD_240x480_HX8352PixelDraw>:


//画一个像素点到液晶屏
void LCD_240x480_HX8352PixelDraw(unsigned long lX,unsigned long lY,
								unsigned long ulValue)
{
 4d8:	b570      	push	{r4, r5, r6, lr}
	//起始的X
	WriteRegister(0x0003,239-lY);
 4da:	f1c1 05ef 	rsb	r5, r1, #239	; 0xef


//画一个像素点到液晶屏
void LCD_240x480_HX8352PixelDraw(unsigned long lX,unsigned long lY,
								unsigned long ulValue)
{
 4de:	4604      	mov	r4, r0
	//起始的X
	WriteRegister(0x0003,239-lY);
 4e0:	b2a9      	uxth	r1, r5
 4e2:	2003      	movs	r0, #3


//画一个像素点到液晶屏
void LCD_240x480_HX8352PixelDraw(unsigned long lX,unsigned long lY,
								unsigned long ulValue)
{
 4e4:	4616      	mov	r6, r2
	//起始的X
	WriteRegister(0x0003,239-lY);
 4e6:	f7ff fe67 	bl	1b8 <WriteRegister>
	WriteRegister(0x0002,(239-lY)>>8);
 4ea:	0a29      	lsrs	r1, r5, #8
 4ec:	2002      	movs	r0, #2
 4ee:	b289      	uxth	r1, r1
 4f0:	f7ff fe62 	bl	1b8 <WriteRegister>
	//起始的Y
	WriteRegister(0x0005,lX);
 4f4:	2005      	movs	r0, #5
 4f6:	b2a1      	uxth	r1, r4
 4f8:	f7ff fe5e 	bl	1b8 <WriteRegister>
	WriteRegister(0x0004,lX>>8);
 4fc:	0a21      	lsrs	r1, r4, #8
 4fe:	2004      	movs	r0, #4
 500:	b289      	uxth	r1, r1
 502:	f7ff fe59 	bl	1b8 <WriteRegister>
	//画像素点
	WriteCommand(0x0022);
 506:	2022      	movs	r0, #34	; 0x22
 508:	f7ff fe38 	bl	17c <WriteCommand>
	WriteData(ulValue);
 50c:	b2b0      	uxth	r0, r6
}
 50e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//起始的Y
	WriteRegister(0x0005,lX);
	WriteRegister(0x0004,lX>>8);
	//画像素点
	WriteCommand(0x0022);
	WriteData(ulValue);
 512:	f7ff be13 	b.w	13c <WriteData>

00000516 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
 516:	e7fe      	b.n	516 <NmiSR>

00000518 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
 518:	e7fe      	b.n	518 <FaultISR>

0000051a <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
 51a:	e7fe      	b.n	51a <IntDefaultHandler>

0000051c <ResetISR>:

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
 51c:	4a0a      	ldr	r2, [pc, #40]	; (548 <zero_loop+0x10>)
 51e:	4b0b      	ldr	r3, [pc, #44]	; (54c <zero_loop+0x14>)
 520:	e003      	b.n	52a <ResetISR+0xe>
    {
        *pulDest++ = *pulSrc++;
 522:	f852 1b04 	ldr.w	r1, [r2], #4
 526:	f843 1b04 	str.w	r1, [r3], #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
 52a:	4909      	ldr	r1, [pc, #36]	; (550 <zero_loop+0x18>)
 52c:	428b      	cmp	r3, r1
 52e:	d3f8      	bcc.n	522 <ResetISR+0x6>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
 530:	4808      	ldr	r0, [pc, #32]	; (554 <zero_loop+0x1c>)
 532:	4909      	ldr	r1, [pc, #36]	; (558 <zero_loop+0x20>)
 534:	f04f 0200 	mov.w	r2, #0

00000538 <zero_loop>:
 538:	4288      	cmp	r0, r1
 53a:	bfb8      	it	lt
 53c:	f840 2b04 	strlt.w	r2, [r0], #4
 540:	dbfa      	blt.n	538 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
 542:	f7ff bdd5 	b.w	f0 <main>
 546:	bf00      	nop
 548:	00000a94 	.word	0x00000a94
 54c:	20000000 	.word	0x20000000
 550:	20000000 	.word	0x20000000
 554:	20000000 	.word	0x20000000
 558:	20000100 	.word	0x20000100

0000055c <GPIODirModeSet>:
 55c:	f012 0f01 	tst.w	r2, #1
 560:	b510      	push	{r4, lr}
 562:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 566:	d003      	beq.n	570 <GPIODirModeSet+0x14>
 568:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 56c:	430b      	orrs	r3, r1
 56e:	e003      	b.n	578 <GPIODirModeSet+0x1c>
 570:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 574:	ea23 0301 	bic.w	r3, r3, r1
 578:	6023      	str	r3, [r4, #0]
 57a:	f012 0f02 	tst.w	r2, #2
 57e:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 582:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 586:	bf14      	ite	ne
 588:	4311      	orrne	r1, r2
 58a:	ea22 0101 	biceq.w	r1, r2, r1
 58e:	6019      	str	r1, [r3, #0]
 590:	bd10      	pop	{r4, pc}

00000592 <GPIOPadConfigSet>:
 592:	f012 0f01 	tst.w	r2, #1
 596:	b530      	push	{r4, r5, lr}
 598:	f500 65a0 	add.w	r5, r0, #1280	; 0x500
 59c:	d003      	beq.n	5a6 <GPIOPadConfigSet+0x14>
 59e:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
 5a2:	430c      	orrs	r4, r1
 5a4:	e003      	b.n	5ae <GPIOPadConfigSet+0x1c>
 5a6:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
 5aa:	ea24 0401 	bic.w	r4, r4, r1
 5ae:	602c      	str	r4, [r5, #0]
 5b0:	f012 0f02 	tst.w	r2, #2
 5b4:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 5b8:	f104 0404 	add.w	r4, r4, #4
 5bc:	d003      	beq.n	5c6 <GPIOPadConfigSet+0x34>
 5be:	f8d0 5504 	ldr.w	r5, [r0, #1284]	; 0x504
 5c2:	430d      	orrs	r5, r1
 5c4:	e003      	b.n	5ce <GPIOPadConfigSet+0x3c>
 5c6:	f8d0 5504 	ldr.w	r5, [r0, #1284]	; 0x504
 5ca:	ea25 0501 	bic.w	r5, r5, r1
 5ce:	f012 0f04 	tst.w	r2, #4
 5d2:	6025      	str	r5, [r4, #0]
 5d4:	f500 65a1 	add.w	r5, r0, #1288	; 0x508
 5d8:	d003      	beq.n	5e2 <GPIOPadConfigSet+0x50>
 5da:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
 5de:	430c      	orrs	r4, r1
 5e0:	e003      	b.n	5ea <GPIOPadConfigSet+0x58>
 5e2:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
 5e6:	ea24 0401 	bic.w	r4, r4, r1
 5ea:	f012 0f08 	tst.w	r2, #8
 5ee:	602c      	str	r4, [r5, #0]
 5f0:	f500 64a3 	add.w	r4, r0, #1304	; 0x518
 5f4:	d003      	beq.n	5fe <GPIOPadConfigSet+0x6c>
 5f6:	f8d0 2518 	ldr.w	r2, [r0, #1304]	; 0x518
 5fa:	430a      	orrs	r2, r1
 5fc:	e003      	b.n	606 <GPIOPadConfigSet+0x74>
 5fe:	f8d0 2518 	ldr.w	r2, [r0, #1304]	; 0x518
 602:	ea22 0201 	bic.w	r2, r2, r1
 606:	6022      	str	r2, [r4, #0]
 608:	f013 0f01 	tst.w	r3, #1
 60c:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 610:	f102 020c 	add.w	r2, r2, #12
 614:	d003      	beq.n	61e <GPIOPadConfigSet+0x8c>
 616:	f8d0 450c 	ldr.w	r4, [r0, #1292]	; 0x50c
 61a:	430c      	orrs	r4, r1
 61c:	e003      	b.n	626 <GPIOPadConfigSet+0x94>
 61e:	f8d0 450c 	ldr.w	r4, [r0, #1292]	; 0x50c
 622:	ea24 0401 	bic.w	r4, r4, r1
 626:	f013 0f02 	tst.w	r3, #2
 62a:	6014      	str	r4, [r2, #0]
 62c:	f500 64a2 	add.w	r4, r0, #1296	; 0x510
 630:	d003      	beq.n	63a <GPIOPadConfigSet+0xa8>
 632:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
 636:	430a      	orrs	r2, r1
 638:	e003      	b.n	642 <GPIOPadConfigSet+0xb0>
 63a:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
 63e:	ea22 0201 	bic.w	r2, r2, r1
 642:	6022      	str	r2, [r4, #0]
 644:	f013 0f04 	tst.w	r3, #4
 648:	f500 62a2 	add.w	r2, r0, #1296	; 0x510
 64c:	f102 0204 	add.w	r2, r2, #4
 650:	d003      	beq.n	65a <GPIOPadConfigSet+0xc8>
 652:	f8d0 4514 	ldr.w	r4, [r0, #1300]	; 0x514
 656:	430c      	orrs	r4, r1
 658:	e003      	b.n	662 <GPIOPadConfigSet+0xd0>
 65a:	f8d0 4514 	ldr.w	r4, [r0, #1300]	; 0x514
 65e:	ea24 0401 	bic.w	r4, r4, r1
 662:	6014      	str	r4, [r2, #0]
 664:	f013 0f08 	tst.w	r3, #8
 668:	f500 62a2 	add.w	r2, r0, #1296	; 0x510
 66c:	f102 020c 	add.w	r2, r2, #12
 670:	d003      	beq.n	67a <GPIOPadConfigSet+0xe8>
 672:	f8d0 451c 	ldr.w	r4, [r0, #1308]	; 0x51c
 676:	430c      	orrs	r4, r1
 678:	e003      	b.n	682 <GPIOPadConfigSet+0xf0>
 67a:	f8d0 451c 	ldr.w	r4, [r0, #1308]	; 0x51c
 67e:	ea24 0401 	bic.w	r4, r4, r1
 682:	6014      	str	r4, [r2, #0]
 684:	f500 62a5 	add.w	r2, r0, #1320	; 0x528
 688:	b923      	cbnz	r3, 694 <GPIOPadConfigSet+0x102>
 68a:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
 68e:	ea43 0101 	orr.w	r1, r3, r1
 692:	e003      	b.n	69c <GPIOPadConfigSet+0x10a>
 694:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
 698:	ea23 0101 	bic.w	r1, r3, r1
 69c:	6011      	str	r1, [r2, #0]
 69e:	bd30      	pop	{r4, r5, pc}

000006a0 <GPIOPinWrite>:
 6a0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 6a4:	4770      	bx	lr

000006a6 <GPIOPinTypeGPIOOutput>:
 6a6:	b570      	push	{r4, r5, r6, lr}
 6a8:	2201      	movs	r2, #1
 6aa:	4605      	mov	r5, r0
 6ac:	460c      	mov	r4, r1
 6ae:	f7ff ff55 	bl	55c <GPIODirModeSet>
 6b2:	4628      	mov	r0, r5
 6b4:	4621      	mov	r1, r4
 6b6:	2201      	movs	r2, #1
 6b8:	2308      	movs	r3, #8
 6ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 6be:	f7ff bf68 	b.w	592 <GPIOPadConfigSet>
 6c2:	0000      	movs	r0, r0

000006c4 <SysCtlPeripheralEnable>:
 6c4:	0f02      	lsrs	r2, r0, #28
 6c6:	b281      	uxth	r1, r0
 6c8:	f400 10f8 	and.w	r0, r0, #2031616	; 0x1f0000
 6cc:	0c00      	lsrs	r0, r0, #16
 6ce:	fa11 f000 	lsls.w	r0, r1, r0
 6d2:	4b03      	ldr	r3, [pc, #12]	; (6e0 <SysCtlPeripheralEnable+0x1c>)
 6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 6d8:	681a      	ldr	r2, [r3, #0]
 6da:	4310      	orrs	r0, r2
 6dc:	6018      	str	r0, [r3, #0]
 6de:	4770      	bx	lr
 6e0:	00000a88 	.word	0x00000a88

000006e4 <SysCtlDelay>:
 6e4:	3801      	subs	r0, #1
 6e6:	d1fd      	bne.n	6e4 <SysCtlDelay>
 6e8:	4770      	bx	lr
 6ea:	0000      	movs	r0, r0

000006ec <SysCtlClockSet>:
 6ec:	4b4d      	ldr	r3, [pc, #308]	; (824 <SysCtlClockSet+0x138>)
 6ee:	b570      	push	{r4, r5, r6, lr}
 6f0:	681a      	ldr	r2, [r3, #0]
 6f2:	4604      	mov	r4, r0
 6f4:	f012 4fe0 	tst.w	r2, #1879048192	; 0x70000000
 6f8:	d006      	beq.n	708 <SysCtlClockSet+0x1c>
 6fa:	681a      	ldr	r2, [r3, #0]
 6fc:	4b4a      	ldr	r3, [pc, #296]	; (828 <SysCtlClockSet+0x13c>)
 6fe:	ea02 0303 	and.w	r3, r2, r3
 702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 706:	d102      	bne.n	70e <SysCtlClockSet+0x22>
 708:	2c00      	cmp	r4, #0
 70a:	f2c0 808a 	blt.w	822 <SysCtlClockSet+0x136>
 70e:	4947      	ldr	r1, [pc, #284]	; (82c <SysCtlClockSet+0x140>)
 710:	4a47      	ldr	r2, [pc, #284]	; (830 <SysCtlClockSet+0x144>)
 712:	680b      	ldr	r3, [r1, #0]
 714:	6816      	ldr	r6, [r2, #0]
 716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 71a:	f423 0580 	bic.w	r5, r3, #4194304	; 0x400000
 71e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 722:	f013 0f02 	tst.w	r3, #2
 726:	600d      	str	r5, [r1, #0]
 728:	6016      	str	r6, [r2, #0]
 72a:	d002      	beq.n	732 <SysCtlClockSet+0x46>
 72c:	f014 0f02 	tst.w	r4, #2
 730:	d005      	beq.n	73e <SysCtlClockSet+0x52>
 732:	f015 0f01 	tst.w	r5, #1
 736:	d01c      	beq.n	772 <SysCtlClockSet+0x86>
 738:	f014 0f01 	tst.w	r4, #1
 73c:	d119      	bne.n	772 <SysCtlClockSet+0x86>
 73e:	ea6f 7384 	mvn.w	r3, r4, lsl #30
 742:	ea6f 7393 	mvn.w	r3, r3, lsr #30
 746:	401d      	ands	r5, r3
 748:	4b38      	ldr	r3, [pc, #224]	; (82c <SysCtlClockSet+0x140>)
 74a:	2e00      	cmp	r6, #0
 74c:	601d      	str	r5, [r3, #0]
 74e:	da05      	bge.n	75c <SysCtlClockSet+0x70>
 750:	f006 0370 	and.w	r3, r6, #112	; 0x70
 754:	2b30      	cmp	r3, #48	; 0x30
 756:	d005      	beq.n	764 <SysCtlClockSet+0x78>
 758:	2b70      	cmp	r3, #112	; 0x70
 75a:	e002      	b.n	762 <SysCtlClockSet+0x76>
 75c:	f005 0330 	and.w	r3, r5, #48	; 0x30
 760:	2b30      	cmp	r3, #48	; 0x30
 762:	d102      	bne.n	76a <SysCtlClockSet+0x7e>
 764:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 768:	e001      	b.n	76e <SysCtlClockSet+0x82>
 76a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 76e:	f7ff ffb9 	bl	6e4 <SysCtlDelay>
 772:	f425 555e 	bic.w	r5, r5, #14208	; 0x3780
 776:	f243 73f0 	movw	r3, #14320	; 0x37f0
 77a:	ea04 0303 	and.w	r3, r4, r3
 77e:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 782:	431d      	orrs	r5, r3
 784:	4b2b      	ldr	r3, [pc, #172]	; (834 <SysCtlClockSet+0x148>)
 786:	4a2c      	ldr	r2, [pc, #176]	; (838 <SysCtlClockSet+0x14c>)
 788:	ea06 0303 	and.w	r3, r6, r3
 78c:	4e2b      	ldr	r6, [pc, #172]	; (83c <SysCtlClockSet+0x150>)
 78e:	2140      	movs	r1, #64	; 0x40
 790:	ea04 0606 	and.w	r6, r4, r6
 794:	431e      	orrs	r6, r3
 796:	f004 0308 	and.w	r3, r4, #8
 79a:	ea56 06c3 	orrs.w	r6, r6, r3, lsl #3
 79e:	6011      	str	r1, [r2, #0]
 7a0:	d504      	bpl.n	7ac <SysCtlClockSet+0xc0>
 7a2:	4b23      	ldr	r3, [pc, #140]	; (830 <SysCtlClockSet+0x144>)
 7a4:	601e      	str	r6, [r3, #0]
 7a6:	3b10      	subs	r3, #16
 7a8:	601d      	str	r5, [r3, #0]
 7aa:	e003      	b.n	7b4 <SysCtlClockSet+0xc8>
 7ac:	4b1f      	ldr	r3, [pc, #124]	; (82c <SysCtlClockSet+0x140>)
 7ae:	601d      	str	r5, [r3, #0]
 7b0:	3310      	adds	r3, #16
 7b2:	601e      	str	r6, [r3, #0]
 7b4:	2010      	movs	r0, #16
 7b6:	f7ff ff95 	bl	6e4 <SysCtlDelay>
 7ba:	4b21      	ldr	r3, [pc, #132]	; (840 <SysCtlClockSet+0x154>)
 7bc:	f025 65f8 	bic.w	r5, r5, #130023424	; 0x7c00000
 7c0:	ea04 0303 	and.w	r3, r4, r3
 7c4:	f025 0503 	bic.w	r5, r5, #3
 7c8:	431d      	orrs	r5, r3
 7ca:	f026 56fc 	bic.w	r6, r6, #528482304	; 0x1f800000
 7ce:	f004 53fc 	and.w	r3, r4, #528482304	; 0x1f800000
 7d2:	431e      	orrs	r6, r3
 7d4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
 7d8:	d008      	beq.n	7ec <SysCtlClockSet+0x100>
 7da:	4b1a      	ldr	r3, [pc, #104]	; (844 <SysCtlClockSet+0x158>)
 7dc:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
 7e0:	ea04 0303 	and.w	r3, r4, r3
 7e4:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
 7e8:	431e      	orrs	r6, r3
 7ea:	e001      	b.n	7f0 <SysCtlClockSet+0x104>
 7ec:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 7f0:	f414 6f00 	tst.w	r4, #2048	; 0x800
 7f4:	d10c      	bne.n	810 <SysCtlClockSet+0x124>
 7f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 7fa:	4a13      	ldr	r2, [pc, #76]	; (848 <SysCtlClockSet+0x15c>)
 7fc:	6812      	ldr	r2, [r2, #0]
 7fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 802:	d101      	bne.n	808 <SysCtlClockSet+0x11c>
 804:	3b01      	subs	r3, #1
 806:	d1f8      	bne.n	7fa <SysCtlClockSet+0x10e>
 808:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80c:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 810:	4b06      	ldr	r3, [pc, #24]	; (82c <SysCtlClockSet+0x140>)
 812:	2010      	movs	r0, #16
 814:	601d      	str	r5, [r3, #0]
 816:	3310      	adds	r3, #16
 818:	601e      	str	r6, [r3, #0]
 81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 81e:	f7ff bf61 	b.w	6e4 <SysCtlDelay>
 822:	bd70      	pop	{r4, r5, r6, pc}
 824:	400fe000 	.word	0x400fe000
 828:	70ff0000 	.word	0x70ff0000
 82c:	400fe060 	.word	0x400fe060
 830:	400fe070 	.word	0x400fe070
 834:	7fffdf8f 	.word	0x7fffdf8f
 838:	400fe058 	.word	0x400fe058
 83c:	80002030 	.word	0x80002030
 840:	07c00003 	.word	0x07c00003
 844:	40400000 	.word	0x40400000
 848:	400fe050 	.word	0x400fe050

0000084c <SysCtlClockGet>:
 84c:	4b6a      	ldr	r3, [pc, #424]	; (9f8 <SysCtlClockGet+0x1ac>)
 84e:	b530      	push	{r4, r5, lr}
 850:	681a      	ldr	r2, [r3, #0]
 852:	3310      	adds	r3, #16
 854:	681b      	ldr	r3, [r3, #0]
 856:	2b00      	cmp	r3, #0
 858:	bfb4      	ite	lt
 85a:	f003 0170 	andlt.w	r1, r3, #112	; 0x70
 85e:	f002 0130 	andge.w	r1, r2, #48	; 0x30
 862:	2920      	cmp	r1, #32
 864:	d03d      	beq.n	8e2 <SysCtlClockGet+0x96>
 866:	d803      	bhi.n	870 <SysCtlClockGet+0x24>
 868:	b181      	cbz	r1, 88c <SysCtlClockGet+0x40>
 86a:	2910      	cmp	r1, #16
 86c:	d106      	bne.n	87c <SysCtlClockGet+0x30>
 86e:	e014      	b.n	89a <SysCtlClockGet+0x4e>
 870:	2960      	cmp	r1, #96	; 0x60
 872:	d005      	beq.n	880 <SysCtlClockGet+0x34>
 874:	2970      	cmp	r1, #112	; 0x70
 876:	d057      	beq.n	928 <SysCtlClockGet+0xdc>
 878:	2930      	cmp	r1, #48	; 0x30
 87a:	d004      	beq.n	886 <SysCtlClockGet+0x3a>
 87c:	2000      	movs	r0, #0
 87e:	bd30      	pop	{r4, r5, pc}
 880:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 884:	e05e      	b.n	944 <SysCtlClockGet+0xf8>
 886:	f247 5030 	movw	r0, #30000	; 0x7530
 88a:	e05b      	b.n	944 <SysCtlClockGet+0xf8>
 88c:	f402 60f8 	and.w	r0, r2, #1984	; 0x7c0
 890:	495a      	ldr	r1, [pc, #360]	; (9fc <SysCtlClockGet+0x1b0>)
 892:	0980      	lsrs	r0, r0, #6
 894:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 898:	e054      	b.n	944 <SysCtlClockGet+0xf8>
 89a:	4959      	ldr	r1, [pc, #356]	; (a00 <SysCtlClockGet+0x1b4>)
 89c:	6808      	ldr	r0, [r1, #0]
 89e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
 8a2:	d048      	beq.n	936 <SysCtlClockGet+0xea>
 8a4:	680c      	ldr	r4, [r1, #0]
 8a6:	4857      	ldr	r0, [pc, #348]	; (a04 <SysCtlClockGet+0x1b8>)
 8a8:	ea04 0000 	and.w	r0, r4, r0
 8ac:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8b0:	d041      	beq.n	936 <SysCtlClockGet+0xea>
 8b2:	680c      	ldr	r4, [r1, #0]
 8b4:	4853      	ldr	r0, [pc, #332]	; (a04 <SysCtlClockGet+0x1b8>)
 8b6:	ea04 0000 	and.w	r0, r4, r0
 8ba:	4c53      	ldr	r4, [pc, #332]	; (a08 <SysCtlClockGet+0x1bc>)
 8bc:	42a0      	cmp	r0, r4
 8be:	d103      	bne.n	8c8 <SysCtlClockGet+0x7c>
 8c0:	6809      	ldr	r1, [r1, #0]
 8c2:	b289      	uxth	r1, r1
 8c4:	2902      	cmp	r1, #2
 8c6:	d032      	beq.n	92e <SysCtlClockGet+0xe2>
 8c8:	484d      	ldr	r0, [pc, #308]	; (a00 <SysCtlClockGet+0x1b4>)
 8ca:	494e      	ldr	r1, [pc, #312]	; (a04 <SysCtlClockGet+0x1b8>)
 8cc:	6804      	ldr	r4, [r0, #0]
 8ce:	ea04 0101 	and.w	r1, r4, r1
 8d2:	4c4e      	ldr	r4, [pc, #312]	; (a0c <SysCtlClockGet+0x1c0>)
 8d4:	42a1      	cmp	r1, r4
 8d6:	d130      	bne.n	93a <SysCtlClockGet+0xee>
 8d8:	6801      	ldr	r1, [r0, #0]
 8da:	b289      	uxth	r1, r1
 8dc:	2900      	cmp	r1, #0
 8de:	d026      	beq.n	92e <SysCtlClockGet+0xe2>
 8e0:	e02b      	b.n	93a <SysCtlClockGet+0xee>
 8e2:	4947      	ldr	r1, [pc, #284]	; (a00 <SysCtlClockGet+0x1b4>)
 8e4:	6808      	ldr	r0, [r1, #0]
 8e6:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
 8ea:	d028      	beq.n	93e <SysCtlClockGet+0xf2>
 8ec:	680c      	ldr	r4, [r1, #0]
 8ee:	4845      	ldr	r0, [pc, #276]	; (a04 <SysCtlClockGet+0x1b8>)
 8f0:	ea04 0000 	and.w	r0, r4, r0
 8f4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8f8:	d021      	beq.n	93e <SysCtlClockGet+0xf2>
 8fa:	680c      	ldr	r4, [r1, #0]
 8fc:	4841      	ldr	r0, [pc, #260]	; (a04 <SysCtlClockGet+0x1b8>)
 8fe:	ea04 0000 	and.w	r0, r4, r0
 902:	4c41      	ldr	r4, [pc, #260]	; (a08 <SysCtlClockGet+0x1bc>)
 904:	42a0      	cmp	r0, r4
 906:	d103      	bne.n	910 <SysCtlClockGet+0xc4>
 908:	6809      	ldr	r1, [r1, #0]
 90a:	b289      	uxth	r1, r1
 90c:	2902      	cmp	r1, #2
 90e:	d010      	beq.n	932 <SysCtlClockGet+0xe6>
 910:	483b      	ldr	r0, [pc, #236]	; (a00 <SysCtlClockGet+0x1b4>)
 912:	493c      	ldr	r1, [pc, #240]	; (a04 <SysCtlClockGet+0x1b8>)
 914:	6804      	ldr	r4, [r0, #0]
 916:	ea04 0101 	and.w	r1, r4, r1
 91a:	4c3c      	ldr	r4, [pc, #240]	; (a0c <SysCtlClockGet+0x1c0>)
 91c:	42a1      	cmp	r1, r4
 91e:	d110      	bne.n	942 <SysCtlClockGet+0xf6>
 920:	6801      	ldr	r1, [r0, #0]
 922:	b289      	uxth	r1, r1
 924:	b129      	cbz	r1, 932 <SysCtlClockGet+0xe6>
 926:	e00c      	b.n	942 <SysCtlClockGet+0xf6>
 928:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 92c:	e00a      	b.n	944 <SysCtlClockGet+0xf8>
 92e:	4838      	ldr	r0, [pc, #224]	; (a10 <SysCtlClockGet+0x1c4>)
 930:	e008      	b.n	944 <SysCtlClockGet+0xf8>
 932:	4838      	ldr	r0, [pc, #224]	; (a14 <SysCtlClockGet+0x1c8>)
 934:	e006      	b.n	944 <SysCtlClockGet+0xf8>
 936:	4838      	ldr	r0, [pc, #224]	; (a18 <SysCtlClockGet+0x1cc>)
 938:	e004      	b.n	944 <SysCtlClockGet+0xf8>
 93a:	4838      	ldr	r0, [pc, #224]	; (a1c <SysCtlClockGet+0x1d0>)
 93c:	e002      	b.n	944 <SysCtlClockGet+0xf8>
 93e:	4838      	ldr	r0, [pc, #224]	; (a20 <SysCtlClockGet+0x1d4>)
 940:	e000      	b.n	944 <SysCtlClockGet+0xf8>
 942:	4838      	ldr	r0, [pc, #224]	; (a24 <SysCtlClockGet+0x1d8>)
 944:	2b00      	cmp	r3, #0
 946:	da02      	bge.n	94e <SysCtlClockGet+0x102>
 948:	f413 6f00 	tst.w	r3, #2048	; 0x800
 94c:	e001      	b.n	952 <SysCtlClockGet+0x106>
 94e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 952:	d133      	bne.n	9bc <SysCtlClockGet+0x170>
 954:	4934      	ldr	r1, [pc, #208]	; (a28 <SysCtlClockGet+0x1dc>)
 956:	4c2a      	ldr	r4, [pc, #168]	; (a00 <SysCtlClockGet+0x1b4>)
 958:	6809      	ldr	r1, [r1, #0]
 95a:	6825      	ldr	r5, [r4, #0]
 95c:	f015 4fe0 	tst.w	r5, #1879048192	; 0x70000000
 960:	d006      	beq.n	970 <SysCtlClockGet+0x124>
 962:	6825      	ldr	r5, [r4, #0]
 964:	4c27      	ldr	r4, [pc, #156]	; (a04 <SysCtlClockGet+0x1b8>)
 966:	ea05 0404 	and.w	r4, r5, r4
 96a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 96e:	d10d      	bne.n	98c <SysCtlClockGet+0x140>
 970:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
 974:	ea01 0c0c 	and.w	ip, r1, ip
 978:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 97c:	f10c 0c02 	add.w	ip, ip, #2
 980:	f001 041f 	and.w	r4, r1, #31
 984:	fb0c f000 	mul.w	r0, ip, r0
 988:	3402      	adds	r4, #2
 98a:	e00b      	b.n	9a4 <SysCtlClockGet+0x158>
 98c:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
 990:	ea01 0c0c 	and.w	ip, r1, ip
 994:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 998:	fb0c f000 	mul.w	r0, ip, r0
 99c:	f001 041f 	and.w	r4, r1, #31
 9a0:	3401      	adds	r4, #1
 9a2:	0064      	lsls	r4, r4, #1
 9a4:	fbb0 f0f4 	udiv	r0, r0, r4
 9a8:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 9ac:	bf18      	it	ne
 9ae:	0840      	lsrne	r0, r0, #1
 9b0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 9b4:	bf18      	it	ne
 9b6:	0880      	lsrne	r0, r0, #2
 9b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 9bc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 9c0:	d019      	beq.n	9f6 <SysCtlClockGet+0x1aa>
 9c2:	2b00      	cmp	r3, #0
 9c4:	da11      	bge.n	9ea <SysCtlClockGet+0x19e>
 9c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 9ca:	d007      	beq.n	9dc <SysCtlClockGet+0x190>
 9cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 9d0:	d104      	bne.n	9dc <SysCtlClockGet+0x190>
 9d2:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
 9d6:	0040      	lsls	r0, r0, #1
 9d8:	0d9b      	lsrs	r3, r3, #22
 9da:	e002      	b.n	9e2 <SysCtlClockGet+0x196>
 9dc:	f003 53fc 	and.w	r3, r3, #528482304	; 0x1f800000
 9e0:	0ddb      	lsrs	r3, r3, #23
 9e2:	3301      	adds	r3, #1
 9e4:	fbb0 f0f3 	udiv	r0, r0, r3
 9e8:	bd30      	pop	{r4, r5, pc}
 9ea:	f002 62f0 	and.w	r2, r2, #125829120	; 0x7800000
 9ee:	0dd2      	lsrs	r2, r2, #23
 9f0:	3201      	adds	r2, #1
 9f2:	fbb0 f0f2 	udiv	r0, r0, r2
 9f6:	bd30      	pop	{r4, r5, pc}
 9f8:	400fe060 	.word	0x400fe060
 9fc:	00000a2c 	.word	0x00000a2c
 a00:	400fe000 	.word	0x400fe000
 a04:	70ff0000 	.word	0x70ff0000
 a08:	10010000 	.word	0x10010000
 a0c:	10030000 	.word	0x10030000
 a10:	00b71b00 	.word	0x00b71b00
 a14:	002dc6c0 	.word	0x002dc6c0
 a18:	00e4e1c0 	.word	0x00e4e1c0
 a1c:	00f42400 	.word	0x00f42400
 a20:	00393870 	.word	0x00393870
 a24:	003d0900 	.word	0x003d0900
 a28:	400fe064 	.word	0x400fe064

00000a2c <g_pulXtals>:
 a2c:	000f4240 001c2000 001e8480 00258000     @B... ........%.
 a3c:	00369e99 00384000 003d0900 003e8000     ..6..@8...=...>.
 a4c:	004b0000 004c4b40 004e2000 005b8d80     ..K.@KL.. N...[.
 a5c:	005dc000 00708000 007a1200 007d0000     ..]...p...z...}.
 a6c:	00989680 00b71b00 00bb8000 00cee8c0     ................
 a7c:	00da7a64 00f42400 00fa0000              dz...$......

00000a88 <g_pulRCGCRegs>:
 a88:	400fe100 400fe104 400fe108              ...@...@...@
