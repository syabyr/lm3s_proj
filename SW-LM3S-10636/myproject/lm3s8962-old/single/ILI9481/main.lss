
main.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000100  20000000  20000000  00010000  2**2
                  ALLOC
  2 .debug_abbrev 000001ec  00000000  00000000  00008ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000339  00000000  00000000  00008ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   000002d5  00000000  00000000  00008fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_loc    000001c6  00000000  00000000  000092b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000d2  00000000  00000000  00009478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubtypes 00000024  00000000  00000000  0000954a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a8  00000000  00000000  0000956e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00009616  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018b  00000000  00000000  0000968e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000009d  00000000  00000000  00009819  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000031  00000000  00000000  000098b6  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00000128  00000000  00000000  000098e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_text>:

#ifdef DEBUG
void
__error__(char *pcFilename, unsigned long ulLine)
{
}
   0:	20000100 	.word	0x20000100
   4:	00000541 	.word	0x00000541
   8:	00000539 	.word	0x00000539
   c:	0000053b 	.word	0x0000053b
  10:	0000053d 	.word	0x0000053d
  14:	0000053d 	.word	0x0000053d
  18:	0000053d 	.word	0x0000053d
  1c:	00000000 	.word	0x00000000
  20:	00000000 	.word	0x00000000
  24:	00000000 	.word	0x00000000
  28:	00000000 	.word	0x00000000
  2c:	0000053d 	.word	0x0000053d
  30:	0000053d 	.word	0x0000053d
  34:	00000000 	.word	0x00000000
  38:	0000053d 	.word	0x0000053d
  3c:	0000053d 	.word	0x0000053d
  40:	0000053d 	.word	0x0000053d
  44:	0000053d 	.word	0x0000053d
  48:	0000053d 	.word	0x0000053d
  4c:	0000053d 	.word	0x0000053d
  50:	0000053d 	.word	0x0000053d
  54:	0000053d 	.word	0x0000053d
  58:	0000053d 	.word	0x0000053d
  5c:	0000053d 	.word	0x0000053d
  60:	0000053d 	.word	0x0000053d
  64:	0000053d 	.word	0x0000053d
  68:	0000053d 	.word	0x0000053d
  6c:	0000053d 	.word	0x0000053d
  70:	0000053d 	.word	0x0000053d
  74:	0000053d 	.word	0x0000053d
  78:	0000053d 	.word	0x0000053d
  7c:	0000053d 	.word	0x0000053d
  80:	0000053d 	.word	0x0000053d
  84:	0000053d 	.word	0x0000053d
  88:	0000053d 	.word	0x0000053d
  8c:	0000053d 	.word	0x0000053d
  90:	0000053d 	.word	0x0000053d
  94:	0000053d 	.word	0x0000053d
  98:	0000053d 	.word	0x0000053d
  9c:	0000053d 	.word	0x0000053d
  a0:	0000053d 	.word	0x0000053d
  a4:	0000053d 	.word	0x0000053d
  a8:	0000053d 	.word	0x0000053d
  ac:	0000053d 	.word	0x0000053d
  b0:	0000053d 	.word	0x0000053d
  b4:	0000053d 	.word	0x0000053d
  b8:	0000053d 	.word	0x0000053d
  bc:	0000053d 	.word	0x0000053d
  c0:	0000053d 	.word	0x0000053d
  c4:	0000053d 	.word	0x0000053d
  c8:	0000053d 	.word	0x0000053d
  cc:	0000053d 	.word	0x0000053d
  d0:	0000053d 	.word	0x0000053d
  d4:	0000053d 	.word	0x0000053d
  d8:	0000053d 	.word	0x0000053d
  dc:	0000053d 	.word	0x0000053d
  e0:	0000053d 	.word	0x0000053d
  e4:	0000053d 	.word	0x0000053d
  e8:	0000053d 	.word	0x0000053d
  ec:	0000053d 	.word	0x0000053d

000000f0 <main>:
#endif

int main(void)
{
  f0:	b570      	push	{r4, r5, r6, lr}
	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_8MHZ);
  f2:	4846      	ldr	r0, [pc, #280]	; (20c <main+0x11c>)
  f4:	f000 fb0c 	bl	710 <SysCtlClockSet>


//	unsigned ulClockMS = SysCtlClockGet() / (3 * 1000);


	LCDInit();
  f8:	f000 f8d8 	bl	2ac <LCDInit>

    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
  fc:	4b44      	ldr	r3, [pc, #272]	; (210 <main+0x120>)
  fe:	4a45      	ldr	r2, [pc, #276]	; (214 <main+0x124>)
    HWREG(GPIO_PORTB_BASE + GPIO_O_CR) = 0x80;
 100:	4945      	ldr	r1, [pc, #276]	; (218 <main+0x128>)
 102:	2080      	movs	r0, #128	; 0x80
//	unsigned ulClockMS = SysCtlClockGet() / (3 * 1000);


	LCDInit();

    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
 104:	601a      	str	r2, [r3, #0]
    HWREG(GPIO_PORTB_BASE + GPIO_O_CR) = 0x80;
 106:	6008      	str	r0, [r1, #0]
    HWREG(GPIO_PORTB_BASE + GPIO_O_AFSEL) &= ~0x80;
 108:	4844      	ldr	r0, [pc, #272]	; (21c <main+0x12c>)


	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
	unsigned int i,j;

	WriteCommand(0x002C);
 10a:	2528      	movs	r5, #40	; 0x28

	LCDInit();

    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTB_BASE + GPIO_O_CR) = 0x80;
    HWREG(GPIO_PORTB_BASE + GPIO_O_AFSEL) &= ~0x80;
 10c:	6804      	ldr	r4, [r0, #0]
 10e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 112:	6004      	str	r4, [r0, #0]
    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
 114:	601a      	str	r2, [r3, #0]
    HWREG(GPIO_PORTB_BASE + GPIO_O_CR) = 0x00;
 116:	2200      	movs	r2, #0
 118:	600a      	str	r2, [r1, #0]
    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = 0;


	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
 11a:	2140      	movs	r1, #64	; 0x40
    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTB_BASE + GPIO_O_CR) = 0x80;
    HWREG(GPIO_PORTB_BASE + GPIO_O_AFSEL) &= ~0x80;
    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTB_BASE + GPIO_O_CR) = 0x00;
    HWREG(GPIO_PORTB_BASE + GPIO_O_LOCK) = 0;
 11c:	601a      	str	r2, [r3, #0]


	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
 11e:	4840      	ldr	r0, [pc, #256]	; (220 <main+0x130>)
 120:	460a      	mov	r2, r1
 122:	f000 facf 	bl	6c4 <GPIOPinWrite>
	unsigned int i,j;

	WriteCommand(0x002C);
 126:	202c      	movs	r0, #44	; 0x2c
 128:	f000 f89c 	bl	264 <WriteCommand>
 12c:	e00b      	b.n	146 <main+0x56>
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData(j/10);
 12e:	200a      	movs	r0, #10
 130:	fbb4 f0f0 	udiv	r0, r4, r0
 134:	b280      	uxth	r0, r0
	unsigned int i,j;

	WriteCommand(0x002C);
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 136:	3401      	adds	r4, #1
		{
			WriteData(j/10);
 138:	f000 f874 	bl	224 <WriteData>
	unsigned int i,j;

	WriteCommand(0x002C);
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 13c:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 140:	d1f5      	bne.n	12e <main+0x3e>

	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
	unsigned int i,j;

	WriteCommand(0x002C);
	for(i=0;i<40;i++)
 142:	3d01      	subs	r5, #1
 144:	d013      	beq.n	16e <main+0x7e>
{
}
#endif

int main(void)
{
 146:	2400      	movs	r4, #0
 148:	e7f1      	b.n	12e <main+0x3e>

	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData((j/10)<<6);
 14a:	230a      	movs	r3, #10
 14c:	fbb4 f3f3 	udiv	r3, r4, r3
 150:	019b      	lsls	r3, r3, #6
 152:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 156:	ea03 0000 	and.w	r0, r3, r0
		}
	}

	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 15a:	3401      	adds	r4, #1
		{
			WriteData((j/10)<<6);
 15c:	f000 f862 	bl	224 <WriteData>
		}
	}

	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 160:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 164:	d1f1      	bne.n	14a <main+0x5a>
		{
			WriteData(j/10);
		}
	}

	for(i=0;i<40;i++)
 166:	3d01      	subs	r5, #1
 168:	d102      	bne.n	170 <main+0x80>
 16a:	2528      	movs	r5, #40	; 0x28
 16c:	e012      	b.n	194 <main+0xa4>

	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
	unsigned int i,j;

	WriteCommand(0x002C);
	for(i=0;i<40;i++)
 16e:	2528      	movs	r5, #40	; 0x28


	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
	unsigned int i,j;

	WriteCommand(0x002C);
 170:	2400      	movs	r4, #0
 172:	e7ea      	b.n	14a <main+0x5a>

	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData((j/10)<<11);
 174:	200a      	movs	r0, #10
 176:	fbb4 f0f0 	udiv	r0, r4, r0
 17a:	02c0      	lsls	r0, r0, #11
 17c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
		}
	}

	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 180:	3401      	adds	r4, #1
		{
			WriteData((j/10)<<11);
 182:	f000 f84f 	bl	224 <WriteData>
		}
	}

	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 186:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 18a:	d1f3      	bne.n	174 <main+0x84>
		{
			WriteData((j/10)<<6);
		}
	}

	for(i=0;i<40;i++)
 18c:	3d01      	subs	r5, #1
 18e:	d101      	bne.n	194 <main+0xa4>
 190:	2428      	movs	r4, #40	; 0x28
 192:	e00a      	b.n	1aa <main+0xba>

	GPIOPinWrite(GPIO_PORTC_BASE, 0x40, 0x40);		//打开背光
	unsigned int i,j;

	WriteCommand(0x002C);
	for(i=0;i<40;i++)
 194:	2400      	movs	r4, #0
 196:	e7ed      	b.n	174 <main+0x84>
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData(j);
 198:	b2a8      	uxth	r0, r5
			WriteData((j/10)<<11);
		}
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 19a:	3501      	adds	r5, #1
		{
			WriteData(j);
 19c:	f000 f842 	bl	224 <WriteData>
			WriteData((j/10)<<11);
		}
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 1a0:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 1a4:	d1f8      	bne.n	198 <main+0xa8>
		for(j=0;j<320;j++)
		{
			WriteData((j/10)<<11);
		}
	}
	for(i=0;i<40;i++)
 1a6:	3c01      	subs	r4, #1
 1a8:	d00e      	beq.n	1c8 <main+0xd8>
		{
			WriteData(j/10);
		}
	}

	for(i=0;i<40;i++)
 1aa:	2500      	movs	r5, #0
 1ac:	e7f4      	b.n	198 <main+0xa8>
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData(i+j);
 1ae:	1928      	adds	r0, r5, r4
 1b0:	b280      	uxth	r0, r0
			WriteData(j);
		}
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 1b2:	3501      	adds	r5, #1
		{
			WriteData(i+j);
 1b4:	f000 f836 	bl	224 <WriteData>
			WriteData(j);
		}
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 1b8:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 1bc:	d1f7      	bne.n	1ae <main+0xbe>
		for(j=0;j<320;j++)
		{
			WriteData(j);
		}
	}
	for(i=0;i<40;i++)
 1be:	3401      	adds	r4, #1
 1c0:	2c28      	cmp	r4, #40	; 0x28
 1c2:	d101      	bne.n	1c8 <main+0xd8>
 1c4:	3c28      	subs	r4, #40	; 0x28
 1c6:	e012      	b.n	1ee <main+0xfe>
		{
			WriteData((j/10)<<6);
		}
	}

	for(i=0;i<40;i++)
 1c8:	2500      	movs	r5, #0
 1ca:	e7f0      	b.n	1ae <main+0xbe>
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData(i*320+j);
 1cc:	4630      	mov	r0, r6
			WriteData(i+j);
		}
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 1ce:	3501      	adds	r5, #1
 1d0:	3601      	adds	r6, #1
		{
			WriteData(i*320+j);
 1d2:	f000 f827 	bl	224 <WriteData>
			WriteData(i+j);
		}
	}
	for(i=0;i<40;i++)
	{
		for(j=0;j<320;j++)
 1d6:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 1da:	b2b6      	uxth	r6, r6
 1dc:	d1f6      	bne.n	1cc <main+0xdc>
 1de:	f504 74a0 	add.w	r4, r4, #320	; 0x140
 1e2:	b2a4      	uxth	r4, r4
		for(j=0;j<320;j++)
		{
			WriteData(i+j);
		}
	}
	for(i=0;i<40;i++)
 1e4:	f5b4 5f48 	cmp.w	r4, #12800	; 0x3200
 1e8:	d101      	bne.n	1ee <main+0xfe>
 1ea:	24f0      	movs	r4, #240	; 0xf0
 1ec:	e00a      	b.n	204 <main+0x114>
		for(j=0;j<320;j++)
		{
			WriteData((j/10)<<11);
		}
	}
	for(i=0;i<40;i++)
 1ee:	4626      	mov	r6, r4
 1f0:	2500      	movs	r5, #0
 1f2:	e7eb      	b.n	1cc <main+0xdc>
	}
	for(i=0;i<240;i++)
	{
		for(j=0;j<320;j++)
		{
			WriteData(0xffff);
 1f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 1f8:	f000 f814 	bl	224 <WriteData>
			WriteData(i*320+j);
		}
	}
	for(i=0;i<240;i++)
	{
		for(j=0;j<320;j++)
 1fc:	3d01      	subs	r5, #1
 1fe:	d1f9      	bne.n	1f4 <main+0x104>
		for(j=0;j<320;j++)
		{
			WriteData(i*320+j);
		}
	}
	for(i=0;i<240;i++)
 200:	3c01      	subs	r4, #1
 202:	d002      	beq.n	20a <main+0x11a>
		for(j=0;j<320;j++)
		{
			WriteData(j);
		}
	}
	for(i=0;i<40;i++)
 204:	f44f 75a0 	mov.w	r5, #320	; 0x140
 208:	e7f4      	b.n	1f4 <main+0x104>
 20a:	e7fe      	b.n	20a <main+0x11a>
 20c:	01c00380 	.word	0x01c00380
 210:	40005520 	.word	0x40005520
 214:	1acce551 	.word	0x1acce551
 218:	40005524 	.word	0x40005524
 21c:	40005420 	.word	0x40005420
 220:	40006000 	.word	0x40006000

00000224 <WriteData>:
#include "ILI9481.h"


//总线数据写入,将16bit的数据挂载数据总线上,然后使能写信号
void WriteData(unsigned short usData)
{
 224:	b508      	push	{r3, lr}
	//将数据写入数据总线,高8位写在PORTA上,低8位写在PORTB上.
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=usData>>8;
 226:	4b0b      	ldr	r3, [pc, #44]	; (254 <WriteData+0x30>)
 228:	0a02      	lsrs	r2, r0, #8
 22a:	601a      	str	r2, [r3, #0]
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=usData;
 22c:	4b0a      	ldr	r3, [pc, #40]	; (258 <WriteData+0x34>)
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,(usData>>8)&0x0080);
 22e:	2180      	movs	r1, #128	; 0x80
//总线数据写入,将16bit的数据挂载数据总线上,然后使能写信号
void WriteData(unsigned short usData)
{
	//将数据写入数据总线,高8位写在PORTA上,低8位写在PORTB上.
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=usData>>8;
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=usData;
 230:	6018      	str	r0, [r3, #0]
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,(usData>>8)&0x0080);
 232:	400a      	ands	r2, r1
 234:	4809      	ldr	r0, [pc, #36]	; (25c <WriteData+0x38>)
 236:	f000 fa45 	bl	6c4 <GPIOPinWrite>
	//使能读信号,将信号线拉低后再拉高
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 23a:	4b09      	ldr	r3, [pc, #36]	; (260 <WriteData+0x3c>)
 23c:	2200      	movs	r2, #0
 23e:	601a      	str	r2, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 240:	601a      	str	r2, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 242:	601a      	str	r2, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 244:	601a      	str	r2, [r3, #0]
	
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=LCD_WR_PIN;
 246:	3202      	adds	r2, #2
 248:	601a      	str	r2, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=LCD_WR_PIN;
 24a:	601a      	str	r2, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=LCD_WR_PIN;
 24c:	601a      	str	r2, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=LCD_WR_PIN;
 24e:	601a      	str	r2, [r3, #0]
	
}
 250:	bd08      	pop	{r3, pc}
 252:	bf00      	nop
 254:	400053fc 	.word	0x400053fc
 258:	400043fc 	.word	0x400043fc
 25c:	40006000 	.word	0x40006000
 260:	40025008 	.word	0x40025008

00000264 <WriteCommand>:

//写命令,8bit的命令挂载数据总线的低8位,使能寄存器选择信号,再使能写数据信号.
void WriteCommand(unsigned char ucData)
{
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=0x00;
 264:	4b0c      	ldr	r3, [pc, #48]	; (298 <WriteCommand+0x34>)
	return (usData);
}

//写命令,8bit的命令挂载数据总线的低8位,使能寄存器选择信号,再使能写数据信号.
void WriteCommand(unsigned char ucData)
{
 266:	b510      	push	{r4, lr}
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=0x00;
 268:	2400      	movs	r4, #0
 26a:	601c      	str	r4, [r3, #0]
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
 26c:	4b0b      	ldr	r3, [pc, #44]	; (29c <WriteCommand+0x38>)
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,0);
 26e:	2180      	movs	r1, #128	; 0x80
//写命令,8bit的命令挂载数据总线的低8位,使能寄存器选择信号,再使能写数据信号.
void WriteCommand(unsigned char ucData)
{
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=0x00;
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
 270:	6018      	str	r0, [r3, #0]
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,0);
 272:	4622      	mov	r2, r4
 274:	480a      	ldr	r0, [pc, #40]	; (2a0 <WriteCommand+0x3c>)
 276:	f000 fa25 	bl	6c4 <GPIOPinWrite>
	//拉低寄存器选择信号,然后使能写信号
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 27a:	4a0a      	ldr	r2, [pc, #40]	; (2a4 <WriteCommand+0x40>)
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=0x00;
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,0);
	//拉低寄存器选择信号,然后使能写信号
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
 27c:	4b0a      	ldr	r3, [pc, #40]	; (2a8 <WriteCommand+0x44>)
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
	
	//释放写使能信号和寄存器选择信号
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=LCD_WR_PIN;
 27e:	2102      	movs	r1, #2
	//将数据高8bit清零,低8bit载入数据
	HWREG(LCD_DATAH_BASE+GPIO_O_DATA+(0xff<<2))=0x00;
	HWREG(LCD_DATAL_BASE+GPIO_O_DATA+(0xff<<2))=ucData;
	GPIOPinWrite(GPIO_PORTC_BASE,0x80,0);
	//拉低寄存器选择信号,然后使能写信号
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
 280:	601c      	str	r4, [r3, #0]
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
 282:	601c      	str	r4, [r3, #0]
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
 284:	601c      	str	r4, [r3, #0]
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=0;
 286:	601c      	str	r4, [r3, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 288:	6014      	str	r4, [r2, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 28a:	6014      	str	r4, [r2, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 28c:	6014      	str	r4, [r2, #0]
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=0;
 28e:	6014      	str	r4, [r2, #0]
	
	//释放写使能信号和寄存器选择信号
	HWREG(LCD_WR_BASE+GPIO_O_DATA+(LCD_WR_PIN<<2))=LCD_WR_PIN;
 290:	6011      	str	r1, [r2, #0]
	HWREG(LCD_RS_BASE+GPIO_O_DATA+(LCD_RS_PIN<<2))=LCD_RS_PIN;
 292:	2204      	movs	r2, #4
 294:	601a      	str	r2, [r3, #0]
}
 296:	bd10      	pop	{r4, pc}
 298:	400053fc 	.word	0x400053fc
 29c:	400043fc 	.word	0x400043fc
 2a0:	40006000 	.word	0x40006000
 2a4:	40025008 	.word	0x40025008
 2a8:	40025010 	.word	0x40025010

000002ac <LCDInit>:
{
	HWREG(LCD_BL_BASE+GPIO_O_DATA+(LCD_BL_PIN<<2))=0;
}

void LCDInit(void)
{
 2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned long ulClockMS;
	ulClockMS = SysCtlClockGet()/(3*1000);
 2b0:	f000 fade 	bl	870 <SysCtlClockGet>
 2b4:	f640 37b8 	movw	r7, #3000	; 0xbb8
 2b8:	fbb0 f7f7 	udiv	r7, r0, r7
	//使能要连接的端口
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
 2bc:	4890      	ldr	r0, [pc, #576]	; (500 <LCDInit+0x254>)
 2be:	f000 fa13 	bl	6e8 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
 2c2:	4890      	ldr	r0, [pc, #576]	; (504 <LCDInit+0x258>)
 2c4:	f000 fa10 	bl	6e8 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
 2c8:	488f      	ldr	r0, [pc, #572]	; (508 <LCDInit+0x25c>)
 2ca:	f000 fa0d 	bl	6e8 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
 2ce:	488f      	ldr	r0, [pc, #572]	; (50c <LCDInit+0x260>)
 2d0:	f000 fa0a 	bl	6e8 <SysCtlPeripheralEnable>
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);
 2d4:	488e      	ldr	r0, [pc, #568]	; (510 <LCDInit+0x264>)
 2d6:	f000 fa07 	bl	6e8 <SysCtlPeripheralEnable>

	//把前面JTAG使用的端口转换为GPIO
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
 2da:	4b8e      	ldr	r3, [pc, #568]	; (514 <LCDInit+0x268>)
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
 2dc:	4a8e      	ldr	r2, [pc, #568]	; (518 <LCDInit+0x26c>)
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);

	//把前面JTAG使用的端口转换为GPIO
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
 2de:	498f      	ldr	r1, [pc, #572]	; (51c <LCDInit+0x270>)
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
 2e0:	2680      	movs	r6, #128	; 0x80
	HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL)&=~0x80;
 2e2:	488f      	ldr	r0, [pc, #572]	; (520 <LCDInit+0x274>)
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);

	//把前面JTAG使用的端口转换为GPIO
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
 2e4:	6019      	str	r1, [r3, #0]
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
 2e6:	6016      	str	r6, [r2, #0]
	HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL)&=~0x80;
 2e8:	6804      	ldr	r4, [r0, #0]
	GPIOPinWrite(GPIO_PORTF_BASE,0x07,0x07);
	//RESET复位信号,PG0,默认为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE,0x01);

	//复位部分
	SysCtlDelay(100*ulClockMS);
 2ea:	2564      	movs	r5, #100	; 0x64
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);

	//把前面JTAG使用的端口转换为GPIO
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL)&=~0x80;
 2ec:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 2f0:	6004      	str	r4, [r0, #0]
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x00;
 2f2:	2400      	movs	r4, #0

	//把前面JTAG使用的端口转换为GPIO
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL)&=~0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
 2f4:	6019      	str	r1, [r3, #0]
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x00;
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=0;

	//设置这些管脚为输出,以及他们的默认值
	//数据高8bit
	GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,0xff);
 2f6:	488b      	ldr	r0, [pc, #556]	; (524 <LCDInit+0x278>)
	//把前面JTAG使用的端口转换为GPIO
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL)&=~0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x00;
 2f8:	6014      	str	r4, [r2, #0]
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=0;

	//设置这些管脚为输出,以及他们的默认值
	//数据高8bit
	GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,0xff);
 2fa:	21ff      	movs	r1, #255	; 0xff
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_AFSEL)&=~0x80;
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=GPIO_LOCK_KEY;
	HWREG(GPIO_PORTB_BASE+GPIO_O_CR)=0x00;
	HWREG(GPIO_PORTB_BASE+GPIO_O_LOCK)=0;
 2fc:	601c      	str	r4, [r3, #0]

	//设置这些管脚为输出,以及他们的默认值
	//数据高8bit
	GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,0xff);
 2fe:	f000 f9e4 	bl	6ca <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTA_BASE,0xff,0x00);
 302:	4622      	mov	r2, r4
 304:	21ff      	movs	r1, #255	; 0xff
 306:	4887      	ldr	r0, [pc, #540]	; (524 <LCDInit+0x278>)
 308:	f000 f9dc 	bl	6c4 <GPIOPinWrite>
	//数据低8bit
	GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE,0xff);
 30c:	21ff      	movs	r1, #255	; 0xff
 30e:	4886      	ldr	r0, [pc, #536]	; (528 <LCDInit+0x27c>)
 310:	f000 f9db 	bl	6ca <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTB_BASE,0xff,0x00);
 314:	4622      	mov	r2, r4
 316:	21ff      	movs	r1, #255	; 0xff
 318:	4883      	ldr	r0, [pc, #524]	; (528 <LCDInit+0x27c>)
 31a:	f000 f9d3 	bl	6c4 <GPIOPinWrite>
	//PC6,背光,默认背光关闭,等会要打开
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE,0xC0);
 31e:	21c0      	movs	r1, #192	; 0xc0
 320:	4882      	ldr	r0, [pc, #520]	; (52c <LCDInit+0x280>)
 322:	f000 f9d2 	bl	6ca <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTC_BASE,0xC0,0x00);
 326:	4622      	mov	r2, r4
 328:	21c0      	movs	r1, #192	; 0xc0
 32a:	4880      	ldr	r0, [pc, #512]	; (52c <LCDInit+0x280>)
 32c:	f000 f9ca 	bl	6c4 <GPIOPinWrite>
	GPIOPinWrite(GPIO_PORTF_BASE,0x07,0x07);
	//RESET复位信号,PG0,默认为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE,0x01);

	//复位部分
	SysCtlDelay(100*ulClockMS);
 330:	437d      	muls	r5, r7
	GPIOPinWrite(GPIO_PORTB_BASE,0xff,0x00);
	//PC6,背光,默认背光关闭,等会要打开
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE,0xC0);
	GPIOPinWrite(GPIO_PORTC_BASE,0xC0,0x00);
	//RS,WR,RD信号,PF0,PF1,PF2,默认都为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE,0x07);
 332:	2107      	movs	r1, #7
 334:	487e      	ldr	r0, [pc, #504]	; (530 <LCDInit+0x284>)
 336:	f000 f9c8 	bl	6ca <GPIOPinTypeGPIOOutput>
	GPIOPinWrite(GPIO_PORTF_BASE,0x07,0x07);
 33a:	2107      	movs	r1, #7
 33c:	460a      	mov	r2, r1
 33e:	487c      	ldr	r0, [pc, #496]	; (530 <LCDInit+0x284>)
 340:	f000 f9c0 	bl	6c4 <GPIOPinWrite>
	//RESET复位信号,PG0,默认为高电平
	GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE,0x01);
 344:	2101      	movs	r1, #1
 346:	487b      	ldr	r0, [pc, #492]	; (534 <LCDInit+0x288>)
 348:	f000 f9bf 	bl	6ca <GPIOPinTypeGPIOOutput>

	//复位部分
	SysCtlDelay(100*ulClockMS);
 34c:	4628      	mov	r0, r5
 34e:	f000 f9db 	bl	708 <SysCtlDelay>
	GPIOPinWrite(GPIO_PORTG_BASE,0x01,0x00);	//拉低复位信号
 352:	4622      	mov	r2, r4
 354:	2101      	movs	r1, #1
 356:	4877      	ldr	r0, [pc, #476]	; (534 <LCDInit+0x288>)
 358:	f000 f9b4 	bl	6c4 <GPIOPinWrite>
	SysCtlDelay(30*ulClockMS);
 35c:	201e      	movs	r0, #30
 35e:	4378      	muls	r0, r7
 360:	f000 f9d2 	bl	708 <SysCtlDelay>
	GPIOPinWrite(GPIO_PORTG_BASE,0x01,0x01);	//拉高复位信号
 364:	2101      	movs	r1, #1
 366:	460a      	mov	r2, r1
 368:	4872      	ldr	r0, [pc, #456]	; (534 <LCDInit+0x288>)
 36a:	f000 f9ab 	bl	6c4 <GPIOPinWrite>
	SysCtlDelay(100*ulClockMS);
 36e:	4628      	mov	r0, r5
 370:	f000 f9ca 	bl	708 <SysCtlDelay>

	WriteCommand(0x11);
 374:	2011      	movs	r0, #17
 376:	f7ff ff75 	bl	264 <WriteCommand>
	SysCtlDelay(100*ulClockMS);
 37a:	4628      	mov	r0, r5
 37c:	f000 f9c4 	bl	708 <SysCtlDelay>
	WriteCommand(0x13);
 380:	2013      	movs	r0, #19
 382:	f7ff ff6f 	bl	264 <WriteCommand>
	WriteCommand(0xD0);
 386:	20d0      	movs	r0, #208	; 0xd0
 388:	f7ff ff6c 	bl	264 <WriteCommand>
	WriteData(0x07);
 38c:	2007      	movs	r0, #7
 38e:	f7ff ff49 	bl	224 <WriteData>
	WriteData(0x40);
 392:	2040      	movs	r0, #64	; 0x40
 394:	f7ff ff46 	bl	224 <WriteData>
	WriteData(0x1C);
 398:	201c      	movs	r0, #28
 39a:	f7ff ff43 	bl	224 <WriteData>

	WriteCommand(0xD1);	//VCOM Control
 39e:	20d1      	movs	r0, #209	; 0xd1
 3a0:	f7ff ff60 	bl	264 <WriteCommand>
	WriteData(0x00);
 3a4:	4620      	mov	r0, r4
 3a6:	f7ff ff3d 	bl	224 <WriteData>
	WriteData(0x18);
 3aa:	2018      	movs	r0, #24
 3ac:	f7ff ff3a 	bl	224 <WriteData>
	WriteData(0x1D);
 3b0:	201d      	movs	r0, #29
 3b2:	f7ff ff37 	bl	224 <WriteData>

	WriteCommand(0xD2);	//PowerSetting for Normal Mode
 3b6:	20d2      	movs	r0, #210	; 0xd2
 3b8:	f7ff ff54 	bl	264 <WriteCommand>
	WriteData(0x01);
 3bc:	2001      	movs	r0, #1
 3be:	f7ff ff31 	bl	224 <WriteData>
	WriteData(0x11);
 3c2:	2011      	movs	r0, #17
 3c4:	f7ff ff2e 	bl	224 <WriteData>

	WriteCommand(0xC0);	//Panel Driving Setting
 3c8:	20c0      	movs	r0, #192	; 0xc0
 3ca:	f7ff ff4b 	bl	264 <WriteCommand>
	WriteData(0x00);
 3ce:	4620      	mov	r0, r4
 3d0:	f7ff ff28 	bl	224 <WriteData>
	WriteData(0x3B);
 3d4:	203b      	movs	r0, #59	; 0x3b
 3d6:	f7ff ff25 	bl	224 <WriteData>
	WriteData(0x00);
 3da:	4620      	mov	r0, r4
 3dc:	f7ff ff22 	bl	224 <WriteData>
	WriteData(0x02);
 3e0:	2002      	movs	r0, #2
 3e2:	f7ff ff1f 	bl	224 <WriteData>
	WriteData(0x11);
 3e6:	2011      	movs	r0, #17
 3e8:	f7ff ff1c 	bl	224 <WriteData>

	WriteCommand(0xC1);	//Display Timing Setting for Normal Mode
 3ec:	20c1      	movs	r0, #193	; 0xc1
 3ee:	f7ff ff39 	bl	264 <WriteCommand>
	WriteData(0x10);
 3f2:	2010      	movs	r0, #16
 3f4:	f7ff ff16 	bl	224 <WriteData>
	WriteData(0x0B);
 3f8:	200b      	movs	r0, #11
 3fa:	f7ff ff13 	bl	224 <WriteData>
	WriteData(0x88);
 3fe:	2088      	movs	r0, #136	; 0x88
 400:	f7ff ff10 	bl	224 <WriteData>

	WriteCommand(0xC5);	//Frame rate and Inversion Control
 404:	20c5      	movs	r0, #197	; 0xc5
 406:	f7ff ff2d 	bl	264 <WriteCommand>
	WriteData(0x01);
 40a:	2001      	movs	r0, #1
 40c:	f7ff ff0a 	bl	224 <WriteData>

	WriteCommand(0xC8);	//Gamma Setting
 410:	20c8      	movs	r0, #200	; 0xc8
 412:	f7ff ff27 	bl	264 <WriteCommand>
	WriteData(0x00);
 416:	4620      	mov	r0, r4
 418:	f7ff ff04 	bl	224 <WriteData>
	WriteData(0x30);
 41c:	2030      	movs	r0, #48	; 0x30
 41e:	f7ff ff01 	bl	224 <WriteData>
	WriteData(0x36);
 422:	2036      	movs	r0, #54	; 0x36
 424:	f7ff fefe 	bl	224 <WriteData>
	WriteData(0x45);
 428:	2045      	movs	r0, #69	; 0x45
 42a:	f7ff fefb 	bl	224 <WriteData>
	WriteData(0x04);
 42e:	2004      	movs	r0, #4
 430:	f7ff fef8 	bl	224 <WriteData>
	WriteData(0x16);
 434:	2016      	movs	r0, #22
 436:	f7ff fef5 	bl	224 <WriteData>
	WriteData(0x37);
 43a:	2037      	movs	r0, #55	; 0x37
 43c:	f7ff fef2 	bl	224 <WriteData>
	WriteData(0x75);
 440:	2075      	movs	r0, #117	; 0x75
 442:	f7ff feef 	bl	224 <WriteData>
	WriteData(0x77);
 446:	2077      	movs	r0, #119	; 0x77
 448:	f7ff feec 	bl	224 <WriteData>
	WriteData(0x54);
 44c:	2054      	movs	r0, #84	; 0x54
 44e:	f7ff fee9 	bl	224 <WriteData>
	WriteData(0x0F);
 452:	200f      	movs	r0, #15
 454:	f7ff fee6 	bl	224 <WriteData>
	WriteData(0x00);
 458:	4620      	mov	r0, r4
 45a:	f7ff fee3 	bl	224 <WriteData>

	WriteCommand(0xE4);	//No this command
 45e:	20e4      	movs	r0, #228	; 0xe4
 460:	f7ff ff00 	bl	264 <WriteCommand>
	WriteData(0xA0);
 464:	20a0      	movs	r0, #160	; 0xa0
 466:	f7ff fedd 	bl	224 <WriteData>

	WriteCommand(0xF0);	//
 46a:	20f0      	movs	r0, #240	; 0xf0
 46c:	f7ff fefa 	bl	264 <WriteCommand>
	WriteData(0x01);
 470:	2001      	movs	r0, #1
 472:	f7ff fed7 	bl	224 <WriteData>

	WriteCommand(0xF3);
 476:	20f3      	movs	r0, #243	; 0xf3
 478:	f7ff fef4 	bl	264 <WriteCommand>
	WriteData(0x40);
 47c:	2040      	movs	r0, #64	; 0x40
 47e:	f7ff fed1 	bl	224 <WriteData>
	WriteData(0x0A);
 482:	200a      	movs	r0, #10
 484:	f7ff fece 	bl	224 <WriteData>

	WriteCommand(0xF7);
 488:	20f7      	movs	r0, #247	; 0xf7
 48a:	f7ff feeb 	bl	264 <WriteCommand>
	WriteData(0x80);
 48e:	4630      	mov	r0, r6
 490:	f7ff fec8 	bl	224 <WriteData>

	WriteCommand(0x36);	//set address mode
 494:	2036      	movs	r0, #54	; 0x36
 496:	f7ff fee5 	bl	264 <WriteCommand>
	WriteData(0x0A);
 49a:	200a      	movs	r0, #10
 49c:	f7ff fec2 	bl	224 <WriteData>

	WriteCommand(0x3A);	//set pixel format
 4a0:	203a      	movs	r0, #58	; 0x3a
 4a2:	f7ff fedf 	bl	264 <WriteCommand>
	WriteData(0x55);
 4a6:	2055      	movs	r0, #85	; 0x55
 4a8:	f7ff febc 	bl	224 <WriteData>

	WriteCommand(0x2A);	//set column address
 4ac:	202a      	movs	r0, #42	; 0x2a
 4ae:	f7ff fed9 	bl	264 <WriteCommand>
	WriteData(0x00);
 4b2:	4620      	mov	r0, r4
 4b4:	f7ff feb6 	bl	224 <WriteData>
	WriteData(0x00);
 4b8:	4620      	mov	r0, r4
 4ba:	f7ff feb3 	bl	224 <WriteData>
	WriteData(0x01);
 4be:	2001      	movs	r0, #1
 4c0:	f7ff feb0 	bl	224 <WriteData>
	WriteData(0x3F);
 4c4:	203f      	movs	r0, #63	; 0x3f
 4c6:	f7ff fead 	bl	224 <WriteData>

	WriteCommand(0x2B);	//set page address
 4ca:	202b      	movs	r0, #43	; 0x2b
 4cc:	f7ff feca 	bl	264 <WriteCommand>
	WriteData(0x00);
 4d0:	4620      	mov	r0, r4
 4d2:	f7ff fea7 	bl	224 <WriteData>
	WriteData(0x00);
 4d6:	4620      	mov	r0, r4
 4d8:	f7ff fea4 	bl	224 <WriteData>
	WriteData(0x01);
 4dc:	2001      	movs	r0, #1
 4de:	f7ff fea1 	bl	224 <WriteData>
	WriteData(0xDF);
 4e2:	20df      	movs	r0, #223	; 0xdf
 4e4:	f7ff fe9e 	bl	224 <WriteData>

	SysCtlDelay(100*ulClockMS);
 4e8:	4628      	mov	r0, r5
 4ea:	f000 f90d 	bl	708 <SysCtlDelay>

	WriteCommand(0x29);	//set display on
 4ee:	2029      	movs	r0, #41	; 0x29
 4f0:	f7ff feb8 	bl	264 <WriteCommand>
	WriteCommand(0x2C);	//write memory start
 4f4:	202c      	movs	r0, #44	; 0x2c
}
 4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	WriteData(0xDF);

	SysCtlDelay(100*ulClockMS);

	WriteCommand(0x29);	//set display on
	WriteCommand(0x2C);	//write memory start
 4fa:	f7ff beb3 	b.w	264 <WriteCommand>
 4fe:	bf00      	nop
 500:	20000001 	.word	0x20000001
 504:	20000002 	.word	0x20000002
 508:	20000004 	.word	0x20000004
 50c:	20000020 	.word	0x20000020
 510:	20000040 	.word	0x20000040
 514:	40005520 	.word	0x40005520
 518:	40005524 	.word	0x40005524
 51c:	1acce551 	.word	0x1acce551
 520:	40005420 	.word	0x40005420
 524:	40004000 	.word	0x40004000
 528:	40005000 	.word	0x40005000
 52c:	40006000 	.word	0x40006000
 530:	40025000 	.word	0x40025000
 534:	40026000 	.word	0x40026000

00000538 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
 538:	e7fe      	b.n	538 <NmiSR>

0000053a <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
 53a:	e7fe      	b.n	53a <FaultISR>

0000053c <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
 53c:	e7fe      	b.n	53c <IntDefaultHandler>
 53e:	0000      	movs	r0, r0

00000540 <ResetISR>:

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
 540:	4a0a      	ldr	r2, [pc, #40]	; (56c <zero_loop+0x10>)
 542:	4b0b      	ldr	r3, [pc, #44]	; (570 <zero_loop+0x14>)
 544:	e003      	b.n	54e <ResetISR+0xe>
    {
        *pulDest++ = *pulSrc++;
 546:	f852 1b04 	ldr.w	r1, [r2], #4
 54a:	f843 1b04 	str.w	r1, [r3], #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
 54e:	4909      	ldr	r1, [pc, #36]	; (574 <zero_loop+0x18>)
 550:	428b      	cmp	r3, r1
 552:	d3f8      	bcc.n	546 <ResetISR+0x6>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
 554:	4808      	ldr	r0, [pc, #32]	; (578 <zero_loop+0x1c>)
 556:	4909      	ldr	r1, [pc, #36]	; (57c <zero_loop+0x20>)
 558:	f04f 0200 	mov.w	r2, #0

0000055c <zero_loop>:
 55c:	4288      	cmp	r0, r1
 55e:	bfb8      	it	lt
 560:	f840 2b04 	strlt.w	r2, [r0], #4
 564:	dbfa      	blt.n	55c <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
 566:	f7ff bdc3 	b.w	f0 <main>
 56a:	bf00      	nop
 56c:	00000ab8 	.word	0x00000ab8
 570:	20000000 	.word	0x20000000
 574:	20000000 	.word	0x20000000
 578:	20000000 	.word	0x20000000
 57c:	20000100 	.word	0x20000100

00000580 <GPIODirModeSet>:
 580:	f012 0f01 	tst.w	r2, #1
 584:	b510      	push	{r4, lr}
 586:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 58a:	d003      	beq.n	594 <GPIODirModeSet+0x14>
 58c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 590:	430b      	orrs	r3, r1
 592:	e003      	b.n	59c <GPIODirModeSet+0x1c>
 594:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 598:	ea23 0301 	bic.w	r3, r3, r1
 59c:	6023      	str	r3, [r4, #0]
 59e:	f012 0f02 	tst.w	r2, #2
 5a2:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 5a6:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 5aa:	bf14      	ite	ne
 5ac:	4311      	orrne	r1, r2
 5ae:	ea22 0101 	biceq.w	r1, r2, r1
 5b2:	6019      	str	r1, [r3, #0]
 5b4:	bd10      	pop	{r4, pc}

000005b6 <GPIOPadConfigSet>:
 5b6:	f012 0f01 	tst.w	r2, #1
 5ba:	b530      	push	{r4, r5, lr}
 5bc:	f500 65a0 	add.w	r5, r0, #1280	; 0x500
 5c0:	d003      	beq.n	5ca <GPIOPadConfigSet+0x14>
 5c2:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
 5c6:	430c      	orrs	r4, r1
 5c8:	e003      	b.n	5d2 <GPIOPadConfigSet+0x1c>
 5ca:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
 5ce:	ea24 0401 	bic.w	r4, r4, r1
 5d2:	602c      	str	r4, [r5, #0]
 5d4:	f012 0f02 	tst.w	r2, #2
 5d8:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 5dc:	f104 0404 	add.w	r4, r4, #4
 5e0:	d003      	beq.n	5ea <GPIOPadConfigSet+0x34>
 5e2:	f8d0 5504 	ldr.w	r5, [r0, #1284]	; 0x504
 5e6:	430d      	orrs	r5, r1
 5e8:	e003      	b.n	5f2 <GPIOPadConfigSet+0x3c>
 5ea:	f8d0 5504 	ldr.w	r5, [r0, #1284]	; 0x504
 5ee:	ea25 0501 	bic.w	r5, r5, r1
 5f2:	f012 0f04 	tst.w	r2, #4
 5f6:	6025      	str	r5, [r4, #0]
 5f8:	f500 65a1 	add.w	r5, r0, #1288	; 0x508
 5fc:	d003      	beq.n	606 <GPIOPadConfigSet+0x50>
 5fe:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
 602:	430c      	orrs	r4, r1
 604:	e003      	b.n	60e <GPIOPadConfigSet+0x58>
 606:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
 60a:	ea24 0401 	bic.w	r4, r4, r1
 60e:	f012 0f08 	tst.w	r2, #8
 612:	602c      	str	r4, [r5, #0]
 614:	f500 64a3 	add.w	r4, r0, #1304	; 0x518
 618:	d003      	beq.n	622 <GPIOPadConfigSet+0x6c>
 61a:	f8d0 2518 	ldr.w	r2, [r0, #1304]	; 0x518
 61e:	430a      	orrs	r2, r1
 620:	e003      	b.n	62a <GPIOPadConfigSet+0x74>
 622:	f8d0 2518 	ldr.w	r2, [r0, #1304]	; 0x518
 626:	ea22 0201 	bic.w	r2, r2, r1
 62a:	6022      	str	r2, [r4, #0]
 62c:	f013 0f01 	tst.w	r3, #1
 630:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 634:	f102 020c 	add.w	r2, r2, #12
 638:	d003      	beq.n	642 <GPIOPadConfigSet+0x8c>
 63a:	f8d0 450c 	ldr.w	r4, [r0, #1292]	; 0x50c
 63e:	430c      	orrs	r4, r1
 640:	e003      	b.n	64a <GPIOPadConfigSet+0x94>
 642:	f8d0 450c 	ldr.w	r4, [r0, #1292]	; 0x50c
 646:	ea24 0401 	bic.w	r4, r4, r1
 64a:	f013 0f02 	tst.w	r3, #2
 64e:	6014      	str	r4, [r2, #0]
 650:	f500 64a2 	add.w	r4, r0, #1296	; 0x510
 654:	d003      	beq.n	65e <GPIOPadConfigSet+0xa8>
 656:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
 65a:	430a      	orrs	r2, r1
 65c:	e003      	b.n	666 <GPIOPadConfigSet+0xb0>
 65e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
 662:	ea22 0201 	bic.w	r2, r2, r1
 666:	6022      	str	r2, [r4, #0]
 668:	f013 0f04 	tst.w	r3, #4
 66c:	f500 62a2 	add.w	r2, r0, #1296	; 0x510
 670:	f102 0204 	add.w	r2, r2, #4
 674:	d003      	beq.n	67e <GPIOPadConfigSet+0xc8>
 676:	f8d0 4514 	ldr.w	r4, [r0, #1300]	; 0x514
 67a:	430c      	orrs	r4, r1
 67c:	e003      	b.n	686 <GPIOPadConfigSet+0xd0>
 67e:	f8d0 4514 	ldr.w	r4, [r0, #1300]	; 0x514
 682:	ea24 0401 	bic.w	r4, r4, r1
 686:	6014      	str	r4, [r2, #0]
 688:	f013 0f08 	tst.w	r3, #8
 68c:	f500 62a2 	add.w	r2, r0, #1296	; 0x510
 690:	f102 020c 	add.w	r2, r2, #12
 694:	d003      	beq.n	69e <GPIOPadConfigSet+0xe8>
 696:	f8d0 451c 	ldr.w	r4, [r0, #1308]	; 0x51c
 69a:	430c      	orrs	r4, r1
 69c:	e003      	b.n	6a6 <GPIOPadConfigSet+0xf0>
 69e:	f8d0 451c 	ldr.w	r4, [r0, #1308]	; 0x51c
 6a2:	ea24 0401 	bic.w	r4, r4, r1
 6a6:	6014      	str	r4, [r2, #0]
 6a8:	f500 62a5 	add.w	r2, r0, #1320	; 0x528
 6ac:	b923      	cbnz	r3, 6b8 <GPIOPadConfigSet+0x102>
 6ae:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
 6b2:	ea43 0101 	orr.w	r1, r3, r1
 6b6:	e003      	b.n	6c0 <GPIOPadConfigSet+0x10a>
 6b8:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
 6bc:	ea23 0101 	bic.w	r1, r3, r1
 6c0:	6011      	str	r1, [r2, #0]
 6c2:	bd30      	pop	{r4, r5, pc}

000006c4 <GPIOPinWrite>:
 6c4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 6c8:	4770      	bx	lr

000006ca <GPIOPinTypeGPIOOutput>:
 6ca:	b570      	push	{r4, r5, r6, lr}
 6cc:	2201      	movs	r2, #1
 6ce:	4605      	mov	r5, r0
 6d0:	460c      	mov	r4, r1
 6d2:	f7ff ff55 	bl	580 <GPIODirModeSet>
 6d6:	4628      	mov	r0, r5
 6d8:	4621      	mov	r1, r4
 6da:	2201      	movs	r2, #1
 6dc:	2308      	movs	r3, #8
 6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 6e2:	f7ff bf68 	b.w	5b6 <GPIOPadConfigSet>
 6e6:	0000      	movs	r0, r0

000006e8 <SysCtlPeripheralEnable>:
 6e8:	0f02      	lsrs	r2, r0, #28
 6ea:	b281      	uxth	r1, r0
 6ec:	f400 10f8 	and.w	r0, r0, #2031616	; 0x1f0000
 6f0:	0c00      	lsrs	r0, r0, #16
 6f2:	fa11 f000 	lsls.w	r0, r1, r0
 6f6:	4b03      	ldr	r3, [pc, #12]	; (704 <SysCtlPeripheralEnable+0x1c>)
 6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 6fc:	681a      	ldr	r2, [r3, #0]
 6fe:	4310      	orrs	r0, r2
 700:	6018      	str	r0, [r3, #0]
 702:	4770      	bx	lr
 704:	00000aac 	.word	0x00000aac

00000708 <SysCtlDelay>:
 708:	3801      	subs	r0, #1
 70a:	d1fd      	bne.n	708 <SysCtlDelay>
 70c:	4770      	bx	lr
 70e:	0000      	movs	r0, r0

00000710 <SysCtlClockSet>:
 710:	4b4d      	ldr	r3, [pc, #308]	; (848 <SysCtlClockSet+0x138>)
 712:	b570      	push	{r4, r5, r6, lr}
 714:	681a      	ldr	r2, [r3, #0]
 716:	4604      	mov	r4, r0
 718:	f012 4fe0 	tst.w	r2, #1879048192	; 0x70000000
 71c:	d006      	beq.n	72c <SysCtlClockSet+0x1c>
 71e:	681a      	ldr	r2, [r3, #0]
 720:	4b4a      	ldr	r3, [pc, #296]	; (84c <SysCtlClockSet+0x13c>)
 722:	ea02 0303 	and.w	r3, r2, r3
 726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 72a:	d102      	bne.n	732 <SysCtlClockSet+0x22>
 72c:	2c00      	cmp	r4, #0
 72e:	f2c0 808a 	blt.w	846 <SysCtlClockSet+0x136>
 732:	4947      	ldr	r1, [pc, #284]	; (850 <SysCtlClockSet+0x140>)
 734:	4a47      	ldr	r2, [pc, #284]	; (854 <SysCtlClockSet+0x144>)
 736:	680b      	ldr	r3, [r1, #0]
 738:	6816      	ldr	r6, [r2, #0]
 73a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 73e:	f423 0580 	bic.w	r5, r3, #4194304	; 0x400000
 742:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 746:	f013 0f02 	tst.w	r3, #2
 74a:	600d      	str	r5, [r1, #0]
 74c:	6016      	str	r6, [r2, #0]
 74e:	d002      	beq.n	756 <SysCtlClockSet+0x46>
 750:	f014 0f02 	tst.w	r4, #2
 754:	d005      	beq.n	762 <SysCtlClockSet+0x52>
 756:	f015 0f01 	tst.w	r5, #1
 75a:	d01c      	beq.n	796 <SysCtlClockSet+0x86>
 75c:	f014 0f01 	tst.w	r4, #1
 760:	d119      	bne.n	796 <SysCtlClockSet+0x86>
 762:	ea6f 7384 	mvn.w	r3, r4, lsl #30
 766:	ea6f 7393 	mvn.w	r3, r3, lsr #30
 76a:	401d      	ands	r5, r3
 76c:	4b38      	ldr	r3, [pc, #224]	; (850 <SysCtlClockSet+0x140>)
 76e:	2e00      	cmp	r6, #0
 770:	601d      	str	r5, [r3, #0]
 772:	da05      	bge.n	780 <SysCtlClockSet+0x70>
 774:	f006 0370 	and.w	r3, r6, #112	; 0x70
 778:	2b30      	cmp	r3, #48	; 0x30
 77a:	d005      	beq.n	788 <SysCtlClockSet+0x78>
 77c:	2b70      	cmp	r3, #112	; 0x70
 77e:	e002      	b.n	786 <SysCtlClockSet+0x76>
 780:	f005 0330 	and.w	r3, r5, #48	; 0x30
 784:	2b30      	cmp	r3, #48	; 0x30
 786:	d102      	bne.n	78e <SysCtlClockSet+0x7e>
 788:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 78c:	e001      	b.n	792 <SysCtlClockSet+0x82>
 78e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 792:	f7ff ffb9 	bl	708 <SysCtlDelay>
 796:	f425 555e 	bic.w	r5, r5, #14208	; 0x3780
 79a:	f243 73f0 	movw	r3, #14320	; 0x37f0
 79e:	ea04 0303 	and.w	r3, r4, r3
 7a2:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 7a6:	431d      	orrs	r5, r3
 7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <SysCtlClockSet+0x148>)
 7aa:	4a2c      	ldr	r2, [pc, #176]	; (85c <SysCtlClockSet+0x14c>)
 7ac:	ea06 0303 	and.w	r3, r6, r3
 7b0:	4e2b      	ldr	r6, [pc, #172]	; (860 <SysCtlClockSet+0x150>)
 7b2:	2140      	movs	r1, #64	; 0x40
 7b4:	ea04 0606 	and.w	r6, r4, r6
 7b8:	431e      	orrs	r6, r3
 7ba:	f004 0308 	and.w	r3, r4, #8
 7be:	ea56 06c3 	orrs.w	r6, r6, r3, lsl #3
 7c2:	6011      	str	r1, [r2, #0]
 7c4:	d504      	bpl.n	7d0 <SysCtlClockSet+0xc0>
 7c6:	4b23      	ldr	r3, [pc, #140]	; (854 <SysCtlClockSet+0x144>)
 7c8:	601e      	str	r6, [r3, #0]
 7ca:	3b10      	subs	r3, #16
 7cc:	601d      	str	r5, [r3, #0]
 7ce:	e003      	b.n	7d8 <SysCtlClockSet+0xc8>
 7d0:	4b1f      	ldr	r3, [pc, #124]	; (850 <SysCtlClockSet+0x140>)
 7d2:	601d      	str	r5, [r3, #0]
 7d4:	3310      	adds	r3, #16
 7d6:	601e      	str	r6, [r3, #0]
 7d8:	2010      	movs	r0, #16
 7da:	f7ff ff95 	bl	708 <SysCtlDelay>
 7de:	4b21      	ldr	r3, [pc, #132]	; (864 <SysCtlClockSet+0x154>)
 7e0:	f025 65f8 	bic.w	r5, r5, #130023424	; 0x7c00000
 7e4:	ea04 0303 	and.w	r3, r4, r3
 7e8:	f025 0503 	bic.w	r5, r5, #3
 7ec:	431d      	orrs	r5, r3
 7ee:	f026 56fc 	bic.w	r6, r6, #528482304	; 0x1f800000
 7f2:	f004 53fc 	and.w	r3, r4, #528482304	; 0x1f800000
 7f6:	431e      	orrs	r6, r3
 7f8:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
 7fc:	d008      	beq.n	810 <SysCtlClockSet+0x100>
 7fe:	4b1a      	ldr	r3, [pc, #104]	; (868 <SysCtlClockSet+0x158>)
 800:	f426 0680 	bic.w	r6, r6, #4194304	; 0x400000
 804:	ea04 0303 	and.w	r3, r4, r3
 808:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
 80c:	431e      	orrs	r6, r3
 80e:	e001      	b.n	814 <SysCtlClockSet+0x104>
 810:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 814:	f414 6f00 	tst.w	r4, #2048	; 0x800
 818:	d10c      	bne.n	834 <SysCtlClockSet+0x124>
 81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81e:	4a13      	ldr	r2, [pc, #76]	; (86c <SysCtlClockSet+0x15c>)
 820:	6812      	ldr	r2, [r2, #0]
 822:	f012 0f40 	tst.w	r2, #64	; 0x40
 826:	d101      	bne.n	82c <SysCtlClockSet+0x11c>
 828:	3b01      	subs	r3, #1
 82a:	d1f8      	bne.n	81e <SysCtlClockSet+0x10e>
 82c:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 830:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 834:	4b06      	ldr	r3, [pc, #24]	; (850 <SysCtlClockSet+0x140>)
 836:	2010      	movs	r0, #16
 838:	601d      	str	r5, [r3, #0]
 83a:	3310      	adds	r3, #16
 83c:	601e      	str	r6, [r3, #0]
 83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 842:	f7ff bf61 	b.w	708 <SysCtlDelay>
 846:	bd70      	pop	{r4, r5, r6, pc}
 848:	400fe000 	.word	0x400fe000
 84c:	70ff0000 	.word	0x70ff0000
 850:	400fe060 	.word	0x400fe060
 854:	400fe070 	.word	0x400fe070
 858:	7fffdf8f 	.word	0x7fffdf8f
 85c:	400fe058 	.word	0x400fe058
 860:	80002030 	.word	0x80002030
 864:	07c00003 	.word	0x07c00003
 868:	40400000 	.word	0x40400000
 86c:	400fe050 	.word	0x400fe050

00000870 <SysCtlClockGet>:
 870:	4b6a      	ldr	r3, [pc, #424]	; (a1c <SysCtlClockGet+0x1ac>)
 872:	b530      	push	{r4, r5, lr}
 874:	681a      	ldr	r2, [r3, #0]
 876:	3310      	adds	r3, #16
 878:	681b      	ldr	r3, [r3, #0]
 87a:	2b00      	cmp	r3, #0
 87c:	bfb4      	ite	lt
 87e:	f003 0170 	andlt.w	r1, r3, #112	; 0x70
 882:	f002 0130 	andge.w	r1, r2, #48	; 0x30
 886:	2920      	cmp	r1, #32
 888:	d03d      	beq.n	906 <SysCtlClockGet+0x96>
 88a:	d803      	bhi.n	894 <SysCtlClockGet+0x24>
 88c:	b181      	cbz	r1, 8b0 <SysCtlClockGet+0x40>
 88e:	2910      	cmp	r1, #16
 890:	d106      	bne.n	8a0 <SysCtlClockGet+0x30>
 892:	e014      	b.n	8be <SysCtlClockGet+0x4e>
 894:	2960      	cmp	r1, #96	; 0x60
 896:	d005      	beq.n	8a4 <SysCtlClockGet+0x34>
 898:	2970      	cmp	r1, #112	; 0x70
 89a:	d057      	beq.n	94c <SysCtlClockGet+0xdc>
 89c:	2930      	cmp	r1, #48	; 0x30
 89e:	d004      	beq.n	8aa <SysCtlClockGet+0x3a>
 8a0:	2000      	movs	r0, #0
 8a2:	bd30      	pop	{r4, r5, pc}
 8a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8a8:	e05e      	b.n	968 <SysCtlClockGet+0xf8>
 8aa:	f247 5030 	movw	r0, #30000	; 0x7530
 8ae:	e05b      	b.n	968 <SysCtlClockGet+0xf8>
 8b0:	f402 60f8 	and.w	r0, r2, #1984	; 0x7c0
 8b4:	495a      	ldr	r1, [pc, #360]	; (a20 <SysCtlClockGet+0x1b0>)
 8b6:	0980      	lsrs	r0, r0, #6
 8b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8bc:	e054      	b.n	968 <SysCtlClockGet+0xf8>
 8be:	4959      	ldr	r1, [pc, #356]	; (a24 <SysCtlClockGet+0x1b4>)
 8c0:	6808      	ldr	r0, [r1, #0]
 8c2:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
 8c6:	d048      	beq.n	95a <SysCtlClockGet+0xea>
 8c8:	680c      	ldr	r4, [r1, #0]
 8ca:	4857      	ldr	r0, [pc, #348]	; (a28 <SysCtlClockGet+0x1b8>)
 8cc:	ea04 0000 	and.w	r0, r4, r0
 8d0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8d4:	d041      	beq.n	95a <SysCtlClockGet+0xea>
 8d6:	680c      	ldr	r4, [r1, #0]
 8d8:	4853      	ldr	r0, [pc, #332]	; (a28 <SysCtlClockGet+0x1b8>)
 8da:	ea04 0000 	and.w	r0, r4, r0
 8de:	4c53      	ldr	r4, [pc, #332]	; (a2c <SysCtlClockGet+0x1bc>)
 8e0:	42a0      	cmp	r0, r4
 8e2:	d103      	bne.n	8ec <SysCtlClockGet+0x7c>
 8e4:	6809      	ldr	r1, [r1, #0]
 8e6:	b289      	uxth	r1, r1
 8e8:	2902      	cmp	r1, #2
 8ea:	d032      	beq.n	952 <SysCtlClockGet+0xe2>
 8ec:	484d      	ldr	r0, [pc, #308]	; (a24 <SysCtlClockGet+0x1b4>)
 8ee:	494e      	ldr	r1, [pc, #312]	; (a28 <SysCtlClockGet+0x1b8>)
 8f0:	6804      	ldr	r4, [r0, #0]
 8f2:	ea04 0101 	and.w	r1, r4, r1
 8f6:	4c4e      	ldr	r4, [pc, #312]	; (a30 <SysCtlClockGet+0x1c0>)
 8f8:	42a1      	cmp	r1, r4
 8fa:	d130      	bne.n	95e <SysCtlClockGet+0xee>
 8fc:	6801      	ldr	r1, [r0, #0]
 8fe:	b289      	uxth	r1, r1
 900:	2900      	cmp	r1, #0
 902:	d026      	beq.n	952 <SysCtlClockGet+0xe2>
 904:	e02b      	b.n	95e <SysCtlClockGet+0xee>
 906:	4947      	ldr	r1, [pc, #284]	; (a24 <SysCtlClockGet+0x1b4>)
 908:	6808      	ldr	r0, [r1, #0]
 90a:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
 90e:	d028      	beq.n	962 <SysCtlClockGet+0xf2>
 910:	680c      	ldr	r4, [r1, #0]
 912:	4845      	ldr	r0, [pc, #276]	; (a28 <SysCtlClockGet+0x1b8>)
 914:	ea04 0000 	and.w	r0, r4, r0
 918:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 91c:	d021      	beq.n	962 <SysCtlClockGet+0xf2>
 91e:	680c      	ldr	r4, [r1, #0]
 920:	4841      	ldr	r0, [pc, #260]	; (a28 <SysCtlClockGet+0x1b8>)
 922:	ea04 0000 	and.w	r0, r4, r0
 926:	4c41      	ldr	r4, [pc, #260]	; (a2c <SysCtlClockGet+0x1bc>)
 928:	42a0      	cmp	r0, r4
 92a:	d103      	bne.n	934 <SysCtlClockGet+0xc4>
 92c:	6809      	ldr	r1, [r1, #0]
 92e:	b289      	uxth	r1, r1
 930:	2902      	cmp	r1, #2
 932:	d010      	beq.n	956 <SysCtlClockGet+0xe6>
 934:	483b      	ldr	r0, [pc, #236]	; (a24 <SysCtlClockGet+0x1b4>)
 936:	493c      	ldr	r1, [pc, #240]	; (a28 <SysCtlClockGet+0x1b8>)
 938:	6804      	ldr	r4, [r0, #0]
 93a:	ea04 0101 	and.w	r1, r4, r1
 93e:	4c3c      	ldr	r4, [pc, #240]	; (a30 <SysCtlClockGet+0x1c0>)
 940:	42a1      	cmp	r1, r4
 942:	d110      	bne.n	966 <SysCtlClockGet+0xf6>
 944:	6801      	ldr	r1, [r0, #0]
 946:	b289      	uxth	r1, r1
 948:	b129      	cbz	r1, 956 <SysCtlClockGet+0xe6>
 94a:	e00c      	b.n	966 <SysCtlClockGet+0xf6>
 94c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 950:	e00a      	b.n	968 <SysCtlClockGet+0xf8>
 952:	4838      	ldr	r0, [pc, #224]	; (a34 <SysCtlClockGet+0x1c4>)
 954:	e008      	b.n	968 <SysCtlClockGet+0xf8>
 956:	4838      	ldr	r0, [pc, #224]	; (a38 <SysCtlClockGet+0x1c8>)
 958:	e006      	b.n	968 <SysCtlClockGet+0xf8>
 95a:	4838      	ldr	r0, [pc, #224]	; (a3c <SysCtlClockGet+0x1cc>)
 95c:	e004      	b.n	968 <SysCtlClockGet+0xf8>
 95e:	4838      	ldr	r0, [pc, #224]	; (a40 <SysCtlClockGet+0x1d0>)
 960:	e002      	b.n	968 <SysCtlClockGet+0xf8>
 962:	4838      	ldr	r0, [pc, #224]	; (a44 <SysCtlClockGet+0x1d4>)
 964:	e000      	b.n	968 <SysCtlClockGet+0xf8>
 966:	4838      	ldr	r0, [pc, #224]	; (a48 <SysCtlClockGet+0x1d8>)
 968:	2b00      	cmp	r3, #0
 96a:	da02      	bge.n	972 <SysCtlClockGet+0x102>
 96c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 970:	e001      	b.n	976 <SysCtlClockGet+0x106>
 972:	f412 6f00 	tst.w	r2, #2048	; 0x800
 976:	d133      	bne.n	9e0 <SysCtlClockGet+0x170>
 978:	4934      	ldr	r1, [pc, #208]	; (a4c <SysCtlClockGet+0x1dc>)
 97a:	4c2a      	ldr	r4, [pc, #168]	; (a24 <SysCtlClockGet+0x1b4>)
 97c:	6809      	ldr	r1, [r1, #0]
 97e:	6825      	ldr	r5, [r4, #0]
 980:	f015 4fe0 	tst.w	r5, #1879048192	; 0x70000000
 984:	d006      	beq.n	994 <SysCtlClockGet+0x124>
 986:	6825      	ldr	r5, [r4, #0]
 988:	4c27      	ldr	r4, [pc, #156]	; (a28 <SysCtlClockGet+0x1b8>)
 98a:	ea05 0404 	and.w	r4, r5, r4
 98e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 992:	d10d      	bne.n	9b0 <SysCtlClockGet+0x140>
 994:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
 998:	ea01 0c0c 	and.w	ip, r1, ip
 99c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 9a0:	f10c 0c02 	add.w	ip, ip, #2
 9a4:	f001 041f 	and.w	r4, r1, #31
 9a8:	fb0c f000 	mul.w	r0, ip, r0
 9ac:	3402      	adds	r4, #2
 9ae:	e00b      	b.n	9c8 <SysCtlClockGet+0x158>
 9b0:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
 9b4:	ea01 0c0c 	and.w	ip, r1, ip
 9b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 9bc:	fb0c f000 	mul.w	r0, ip, r0
 9c0:	f001 041f 	and.w	r4, r1, #31
 9c4:	3401      	adds	r4, #1
 9c6:	0064      	lsls	r4, r4, #1
 9c8:	fbb0 f0f4 	udiv	r0, r0, r4
 9cc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 9d0:	bf18      	it	ne
 9d2:	0840      	lsrne	r0, r0, #1
 9d4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 9d8:	bf18      	it	ne
 9da:	0880      	lsrne	r0, r0, #2
 9dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 9e0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 9e4:	d019      	beq.n	a1a <SysCtlClockGet+0x1aa>
 9e6:	2b00      	cmp	r3, #0
 9e8:	da11      	bge.n	a0e <SysCtlClockGet+0x19e>
 9ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 9ee:	d007      	beq.n	a00 <SysCtlClockGet+0x190>
 9f0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 9f4:	d104      	bne.n	a00 <SysCtlClockGet+0x190>
 9f6:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
 9fa:	0040      	lsls	r0, r0, #1
 9fc:	0d9b      	lsrs	r3, r3, #22
 9fe:	e002      	b.n	a06 <SysCtlClockGet+0x196>
 a00:	f003 53fc 	and.w	r3, r3, #528482304	; 0x1f800000
 a04:	0ddb      	lsrs	r3, r3, #23
 a06:	3301      	adds	r3, #1
 a08:	fbb0 f0f3 	udiv	r0, r0, r3
 a0c:	bd30      	pop	{r4, r5, pc}
 a0e:	f002 62f0 	and.w	r2, r2, #125829120	; 0x7800000
 a12:	0dd2      	lsrs	r2, r2, #23
 a14:	3201      	adds	r2, #1
 a16:	fbb0 f0f2 	udiv	r0, r0, r2
 a1a:	bd30      	pop	{r4, r5, pc}
 a1c:	400fe060 	.word	0x400fe060
 a20:	00000a50 	.word	0x00000a50
 a24:	400fe000 	.word	0x400fe000
 a28:	70ff0000 	.word	0x70ff0000
 a2c:	10010000 	.word	0x10010000
 a30:	10030000 	.word	0x10030000
 a34:	00b71b00 	.word	0x00b71b00
 a38:	002dc6c0 	.word	0x002dc6c0
 a3c:	00e4e1c0 	.word	0x00e4e1c0
 a40:	00f42400 	.word	0x00f42400
 a44:	00393870 	.word	0x00393870
 a48:	003d0900 	.word	0x003d0900
 a4c:	400fe064 	.word	0x400fe064

00000a50 <g_pulXtals>:
 a50:	000f4240 001c2000 001e8480 00258000     @B... ........%.
 a60:	00369e99 00384000 003d0900 003e8000     ..6..@8...=...>.
 a70:	004b0000 004c4b40 004e2000 005b8d80     ..K.@KL.. N...[.
 a80:	005dc000 00708000 007a1200 007d0000     ..]...p...z...}.
 a90:	00989680 00b71b00 00bb8000 00cee8c0     ................
 aa0:	00da7a64 00f42400 00fa0000              dz...$......

00000aac <g_pulRCGCRegs>:
 aac:	400fe100 400fe104 400fe108              ...@...@...@
